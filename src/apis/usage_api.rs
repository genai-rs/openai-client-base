/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#![allow(clippy::needless_return, clippy::into_iter_on_ref)]


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`usage_audio_speeches`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageAudioSpeechesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_audio_transcriptions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageAudioTranscriptionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_code_interpreter_sessions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageCodeInterpreterSessionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_completions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageCompletionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_costs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageCostsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_embeddings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageEmbeddingsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_images`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageImagesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_moderations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageModerationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`usage_vector_stores`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsageVectorStoresError {
    UnknownValue(serde_json::Value),
}


/// Get audio speeches usage details for the organization.
#[bon::builder]
pub async fn usage_audio_speeches(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, user_ids: Option<Vec<String>>, api_key_ids: Option<Vec<String>>, models: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageAudioSpeechesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_user_ids = user_ids;
    let p_query_api_key_ids = api_key_ids;
    let p_query_models = models;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/audio_speeches", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_user_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("user_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("user_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_api_key_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("api_key_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("api_key_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_models {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("models".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("models", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageAudioSpeechesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get audio transcriptions usage details for the organization.
#[bon::builder]
pub async fn usage_audio_transcriptions(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, user_ids: Option<Vec<String>>, api_key_ids: Option<Vec<String>>, models: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageAudioTranscriptionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_user_ids = user_ids;
    let p_query_api_key_ids = api_key_ids;
    let p_query_models = models;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/audio_transcriptions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_user_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("user_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("user_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_api_key_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("api_key_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("api_key_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_models {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("models".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("models", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageAudioTranscriptionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get code interpreter sessions usage details for the organization.
#[bon::builder]
pub async fn usage_code_interpreter_sessions(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageCodeInterpreterSessionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/code_interpreter_sessions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageCodeInterpreterSessionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get completions usage details for the organization.
#[bon::builder]
pub async fn usage_completions(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, user_ids: Option<Vec<String>>, api_key_ids: Option<Vec<String>>, models: Option<Vec<String>>, batch: Option<bool>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageCompletionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_user_ids = user_ids;
    let p_query_api_key_ids = api_key_ids;
    let p_query_models = models;
    let p_query_batch = batch;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/completions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_user_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("user_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("user_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_api_key_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("api_key_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("api_key_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_models {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("models".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("models", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_batch {
        req_builder = req_builder.query(&[("batch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageCompletionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get costs details for the organization.
#[bon::builder]
pub async fn usage_costs(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageCostsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/costs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageCostsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get embeddings usage details for the organization.
#[bon::builder]
pub async fn usage_embeddings(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, user_ids: Option<Vec<String>>, api_key_ids: Option<Vec<String>>, models: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageEmbeddingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_user_ids = user_ids;
    let p_query_api_key_ids = api_key_ids;
    let p_query_models = models;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/embeddings", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_user_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("user_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("user_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_api_key_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("api_key_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("api_key_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_models {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("models".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("models", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageEmbeddingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get images usage details for the organization.
#[bon::builder]
pub async fn usage_images(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, sources: Option<Vec<String>>, sizes: Option<Vec<String>>, project_ids: Option<Vec<String>>, user_ids: Option<Vec<String>>, api_key_ids: Option<Vec<String>>, models: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageImagesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_sources = sources;
    let p_query_sizes = sizes;
    let p_query_project_ids = project_ids;
    let p_query_user_ids = user_ids;
    let p_query_api_key_ids = api_key_ids;
    let p_query_models = models;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/images", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_sources {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("sources".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("sources", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_sizes {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("sizes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("sizes", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_user_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("user_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("user_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_api_key_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("api_key_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("api_key_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_models {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("models".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("models", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageImagesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get moderations usage details for the organization.
#[bon::builder]
pub async fn usage_moderations(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, user_ids: Option<Vec<String>>, api_key_ids: Option<Vec<String>>, models: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageModerationsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_user_ids = user_ids;
    let p_query_api_key_ids = api_key_ids;
    let p_query_models = models;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/moderations", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_user_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("user_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("user_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_api_key_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("api_key_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("api_key_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_models {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("models".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("models", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageModerationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get vector stores usage details for the organization.
#[bon::builder]
pub async fn usage_vector_stores(configuration: &configuration::Configuration, start_time: i32, end_time: Option<i32>, bucket_width: Option<&str>, project_ids: Option<Vec<String>>, group_by: Option<Vec<String>>, limit: Option<i32>, page: Option<&str>) -> Result<models::UsageResponse, Error<UsageVectorStoresError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_start_time = start_time;
    let p_query_end_time = end_time;
    let p_query_bucket_width = bucket_width;
    let p_query_project_ids = project_ids;
    let p_query_group_by = group_by;
    let p_query_limit = limit;
    let p_query_page = page;

    let uri_str = format!("{}/organization/usage/vector_stores", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("start_time", &p_query_start_time.to_string())]);
    if let Some(ref param_value) = p_query_end_time {
        req_builder = req_builder.query(&[("end_time", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_bucket_width {
        req_builder = req_builder.query(&[("bucket_width", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_project_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("project_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("project_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_group_by {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("group_by".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("group_by", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UsageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UsageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UsageVectorStoresError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

