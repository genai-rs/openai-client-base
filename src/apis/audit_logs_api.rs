/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`list_audit_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAuditLogsError {
    UnknownValue(serde_json::Value),
}

/// List user actions and configuration changes within this organization.
#[bon::builder]
pub async fn list_audit_logs(
    configuration: &configuration::Configuration,
    effective_at: Option<models::ListAuditLogsEffectiveAtParameter>,
    project_ids_left_square_bracket_right_square_bracket: Option<Vec<String>>,
    event_types_left_square_bracket_right_square_bracket: Option<Vec<models::AuditLogEventType>>,
    actor_ids_left_square_bracket_right_square_bracket: Option<Vec<String>>,
    actor_emails_left_square_bracket_right_square_bracket: Option<Vec<String>>,
    resource_ids_left_square_bracket_right_square_bracket: Option<Vec<String>>,
    limit: Option<i32>,
    after: Option<&str>,
    before: Option<&str>,
) -> Result<models::ListAuditLogsResponse, Error<ListAuditLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_effective_at = effective_at;
    let p_query_project_ids_left_square_bracket_right_square_bracket =
        project_ids_left_square_bracket_right_square_bracket;
    let p_query_event_types_left_square_bracket_right_square_bracket =
        event_types_left_square_bracket_right_square_bracket;
    let p_query_actor_ids_left_square_bracket_right_square_bracket =
        actor_ids_left_square_bracket_right_square_bracket;
    let p_query_actor_emails_left_square_bracket_right_square_bracket =
        actor_emails_left_square_bracket_right_square_bracket;
    let p_query_resource_ids_left_square_bracket_right_square_bracket =
        resource_ids_left_square_bracket_right_square_bracket;
    let p_query_limit = limit;
    let p_query_after = after;
    let p_query_before = before;

    let uri_str = format!("{}/organization/audit_logs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_effective_at {
        req_builder = req_builder.query(&param_value);
    }
    if let Some(ref param_value) = p_query_project_ids_left_square_bracket_right_square_bracket {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("project_ids[]".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "project_ids[]",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_event_types_left_square_bracket_right_square_bracket {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("event_types[]".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "event_types[]",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_actor_ids_left_square_bracket_right_square_bracket {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("actor_ids[]".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "actor_ids[]",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_actor_emails_left_square_bracket_right_square_bracket {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("actor_emails[]".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "actor_emails[]",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_resource_ids_left_square_bracket_right_square_bracket {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("resource_ids[]".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "resource_ids[]",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListAuditLogsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListAuditLogsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListAuditLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
