/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType, multipart_helper};
use tokio::fs::File as TokioFile;
use tokio_util::codec::{BytesCodec, FramedRead};


/// struct for typed errors of method [`create_video`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVideoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_video_remix`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVideoRemixError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_video`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteVideoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_video`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVideoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_videos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVideosError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_video_content`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveVideoContentError {
    UnknownValue(serde_json::Value),
}


/// Create a video
#[bon::builder]
pub async fn create_video(configuration: &configuration::Configuration, prompt: &str, model: Option<models::VideoModel>, input_reference: Option<std::path::PathBuf>, seconds: Option<models::VideoSeconds>, size: Option<models::VideoSize>) -> Result<models::VideoResource, Error<CreateVideoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_form_prompt = prompt;
    let p_form_model = model;
    let p_form_input_reference = input_reference;
    let p_form_seconds = seconds;
    let p_form_size = size;

    let uri_str = format!("{}/videos", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    if let Some(param_value) = p_form_model {
        multipart_form = multipart_form.text("model", param_value.to_string());
    }
    multipart_form = multipart_form.text("prompt", p_form_prompt.to_string());
    if let Some(file_path) = p_form_input_reference {

        multipart_form = multipart_helper::add_file_to_form(multipart_form, &file_path, "input_reference")?;

    }
    if let Some(param_value) = p_form_seconds {
        multipart_form = multipart_form.text("seconds", param_value.to_string());
    }
    if let Some(param_value) = p_form_size {
        multipart_form = multipart_form.text("size", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VideoResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VideoResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVideoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a video remix
#[bon::builder]
pub async fn create_video_remix(configuration: &configuration::Configuration, video_id: &str, prompt: &str) -> Result<models::VideoResource, Error<CreateVideoRemixError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_video_id = video_id;
    let p_form_prompt = prompt;

    let uri_str = format!("{}/videos/{video_id}/remix", configuration.base_path, video_id=crate::apis::urlencode(p_path_video_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("prompt", p_form_prompt.to_string());
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VideoResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VideoResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVideoRemixError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a video
#[bon::builder]
pub async fn delete_video(configuration: &configuration::Configuration, video_id: &str) -> Result<models::DeletedVideoResource, Error<DeleteVideoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_video_id = video_id;

    let uri_str = format!("{}/videos/{video_id}", configuration.base_path, video_id=crate::apis::urlencode(p_path_video_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeletedVideoResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeletedVideoResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteVideoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a video
#[bon::builder]
pub async fn get_video(configuration: &configuration::Configuration, video_id: &str) -> Result<models::VideoResource, Error<GetVideoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_video_id = video_id;

    let uri_str = format!("{}/videos/{video_id}", configuration.base_path, video_id=crate::apis::urlencode(p_path_video_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VideoResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VideoResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetVideoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List videos
#[bon::builder]
pub async fn list_videos(configuration: &configuration::Configuration, limit: Option<i32>, order: Option<models::OrderEnum>, after: Option<&str>) -> Result<models::VideoListResource, Error<ListVideosError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_limit = limit;
    let p_query_order = order;
    let p_query_after = after;

    let uri_str = format!("{}/videos", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VideoListResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VideoListResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListVideosError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Download video content
#[bon::builder]
pub async fn retrieve_video_content(configuration: &configuration::Configuration, video_id: &str, variant: Option<models::VideoContentVariant>) -> Result<reqwest::Response, Error<RetrieveVideoContentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_video_id = video_id;
    let p_query_variant = variant;

    let uri_str = format!("{}/videos/{video_id}/content", configuration.base_path, video_id=crate::apis::urlencode(p_path_video_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_variant {
        req_builder = req_builder.query(&[("variant", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(resp)
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveVideoContentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

