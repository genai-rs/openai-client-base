/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#![allow(clippy::needless_return, clippy::into_iter_on_ref)]


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`cancel_vector_store_file_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelVectorStoreFileBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_vector_store_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVectorStoreFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_vector_store_file_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVectorStoreFileBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_vector_store_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteVectorStoreFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vector_store_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVectorStoreFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vector_store_file_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVectorStoreFileBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_files_in_vector_store_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFilesInVectorStoreBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_vector_store_files`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVectorStoreFilesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_vector_stores`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVectorStoresError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modify_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModifyVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_vector_store_file_content`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveVectorStoreFileContentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_vector_store_file_attributes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateVectorStoreFileAttributesError {
    UnknownValue(serde_json::Value),
}


/// Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
#[bon::builder]
pub async fn cancel_vector_store_file_batch(configuration: &configuration::Configuration, vector_store_id: &str, batch_id: &str) -> Result<models::VectorStoreFileBatchObject, Error<CancelVectorStoreFileBatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_batch_id = batch_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), batch_id=crate::apis::urlencode(p_path_batch_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileBatchObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileBatchObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CancelVectorStoreFileBatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a vector store.
#[bon::builder]
pub async fn create_vector_store(configuration: &configuration::Configuration, create_vector_store_request: models::CreateVectorStoreRequest) -> Result<models::VectorStoreObject, Error<CreateVectorStoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_create_vector_store_request = create_vector_store_request;

    let uri_str = format!("{}/vector_stores", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_create_vector_store_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVectorStoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a vector store file by attaching a [File](https://platform.openai.com/docs/api-reference/files) to a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).
#[bon::builder]
pub async fn create_vector_store_file(configuration: &configuration::Configuration, vector_store_id: &str, create_vector_store_file_request: models::CreateVectorStoreFileRequest) -> Result<models::VectorStoreFileObject, Error<CreateVectorStoreFileError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_body_create_vector_store_file_request = create_vector_store_file_request;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/files", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_create_vector_store_file_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVectorStoreFileError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a vector store file batch.
#[bon::builder]
pub async fn create_vector_store_file_batch(configuration: &configuration::Configuration, vector_store_id: &str, create_vector_store_file_batch_request: models::CreateVectorStoreFileBatchRequest) -> Result<models::VectorStoreFileBatchObject, Error<CreateVectorStoreFileBatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_body_create_vector_store_file_batch_request = create_vector_store_file_batch_request;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/file_batches", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_create_vector_store_file_batch_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileBatchObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileBatchObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVectorStoreFileBatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a vector store.
#[bon::builder]
pub async fn delete_vector_store(configuration: &configuration::Configuration, vector_store_id: &str) -> Result<models::DeleteVectorStoreResponse, Error<DeleteVectorStoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeleteVectorStoreResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeleteVectorStoreResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteVectorStoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](https://platform.openai.com/docs/api-reference/files/delete) endpoint.
#[bon::builder]
pub async fn delete_vector_store_file(configuration: &configuration::Configuration, vector_store_id: &str, file_id: &str) -> Result<models::DeleteVectorStoreFileResponse, Error<DeleteVectorStoreFileError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_file_id = file_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/files/{file_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), file_id=crate::apis::urlencode(p_path_file_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeleteVectorStoreFileResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeleteVectorStoreFileResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteVectorStoreFileError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieves a vector store.
#[bon::builder]
pub async fn get_vector_store(configuration: &configuration::Configuration, vector_store_id: &str) -> Result<models::VectorStoreObject, Error<GetVectorStoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetVectorStoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieves a vector store file.
#[bon::builder]
pub async fn get_vector_store_file(configuration: &configuration::Configuration, vector_store_id: &str, file_id: &str) -> Result<models::VectorStoreFileObject, Error<GetVectorStoreFileError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_file_id = file_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/files/{file_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), file_id=crate::apis::urlencode(p_path_file_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetVectorStoreFileError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieves a vector store file batch.
#[bon::builder]
pub async fn get_vector_store_file_batch(configuration: &configuration::Configuration, vector_store_id: &str, batch_id: &str) -> Result<models::VectorStoreFileBatchObject, Error<GetVectorStoreFileBatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_batch_id = batch_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/file_batches/{batch_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), batch_id=crate::apis::urlencode(p_path_batch_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileBatchObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileBatchObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetVectorStoreFileBatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of vector store files in a batch.
#[bon::builder]
pub async fn list_files_in_vector_store_batch(configuration: &configuration::Configuration, vector_store_id: &str, batch_id: &str, limit: Option<i32>, order: Option<&str>, after: Option<&str>, before: Option<&str>, filter: Option<&str>) -> Result<models::ListVectorStoreFilesResponse, Error<ListFilesInVectorStoreBatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_batch_id = batch_id;
    let p_query_limit = limit;
    let p_query_order = order;
    let p_query_after = after;
    let p_query_before = before;
    let p_query_filter = filter;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/file_batches/{batch_id}/files", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), batch_id=crate::apis::urlencode(p_path_batch_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListVectorStoreFilesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListVectorStoreFilesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListFilesInVectorStoreBatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of vector store files.
#[bon::builder]
pub async fn list_vector_store_files(configuration: &configuration::Configuration, vector_store_id: &str, limit: Option<i32>, order: Option<&str>, after: Option<&str>, before: Option<&str>, filter: Option<&str>) -> Result<models::ListVectorStoreFilesResponse, Error<ListVectorStoreFilesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_query_limit = limit;
    let p_query_order = order;
    let p_query_after = after;
    let p_query_before = before;
    let p_query_filter = filter;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/files", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListVectorStoreFilesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListVectorStoreFilesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListVectorStoreFilesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of vector stores.
#[bon::builder]
pub async fn list_vector_stores(configuration: &configuration::Configuration, limit: Option<i32>, order: Option<&str>, after: Option<&str>, before: Option<&str>) -> Result<models::ListVectorStoresResponse, Error<ListVectorStoresError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_limit = limit;
    let p_query_order = order;
    let p_query_after = after;
    let p_query_before = before;

    let uri_str = format!("{}/vector_stores", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListVectorStoresResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListVectorStoresResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListVectorStoresError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Modifies a vector store.
#[bon::builder]
pub async fn modify_vector_store(configuration: &configuration::Configuration, vector_store_id: &str, update_vector_store_request: models::UpdateVectorStoreRequest) -> Result<models::VectorStoreObject, Error<ModifyVectorStoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_body_update_vector_store_request = update_vector_store_request;

    let uri_str = format!("{}/vector_stores/{vector_store_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_update_vector_store_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ModifyVectorStoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve the parsed contents of a vector store file.
#[bon::builder]
pub async fn retrieve_vector_store_file_content(configuration: &configuration::Configuration, vector_store_id: &str, file_id: &str) -> Result<models::VectorStoreFileContentResponse, Error<RetrieveVectorStoreFileContentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_file_id = file_id;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/files/{file_id}/content", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), file_id=crate::apis::urlencode(p_path_file_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileContentResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileContentResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveVectorStoreFileContentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Search a vector store for relevant chunks based on a query and file attributes filter.
#[bon::builder]
pub async fn search_vector_store(configuration: &configuration::Configuration, vector_store_id: &str, vector_store_search_request: models::VectorStoreSearchRequest) -> Result<models::VectorStoreSearchResultsPage, Error<SearchVectorStoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_body_vector_store_search_request = vector_store_search_request;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/search", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_vector_store_search_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreSearchResultsPage`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreSearchResultsPage`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchVectorStoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update attributes on a vector store file.
#[bon::builder]
pub async fn update_vector_store_file_attributes(configuration: &configuration::Configuration, vector_store_id: &str, file_id: &str, update_vector_store_file_attributes_request: models::UpdateVectorStoreFileAttributesRequest) -> Result<models::VectorStoreFileObject, Error<UpdateVectorStoreFileAttributesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_vector_store_id = vector_store_id;
    let p_path_file_id = file_id;
    let p_body_update_vector_store_file_attributes_request = update_vector_store_file_attributes_request;

    let uri_str = format!("{}/vector_stores/{vector_store_id}/files/{file_id}", configuration.base_path, vector_store_id=crate::apis::urlencode(p_path_vector_store_id), file_id=crate::apis::urlencode(p_path_file_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_update_vector_store_file_attributes_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VectorStoreFileObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VectorStoreFileObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateVectorStoreFileAttributesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

