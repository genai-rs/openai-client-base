/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`cancel_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelFineTuningJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_fine_tuning_checkpoint_permission`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateFineTuningCheckpointPermissionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateFineTuningJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_fine_tuning_checkpoint_permission`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteFineTuningCheckpointPermissionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_fine_tuning_checkpoint_permissions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFineTuningCheckpointPermissionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_fine_tuning_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFineTuningEventsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_fine_tuning_job_checkpoints`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFineTuningJobCheckpointsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_paginated_fine_tuning_jobs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPaginatedFineTuningJobsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pause_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PauseFineTuningJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`resume_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResumeFineTuningJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveFineTuningJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`run_grader`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RunGraderError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`validate_grader`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValidateGraderError {
    UnknownValue(serde_json::Value),
}

/// Immediately cancel a fine-tune job.
#[bon::builder]
pub async fn cancel_fine_tuning_job(
    configuration: &configuration::Configuration,
    fine_tuning_job_id: &str,
) -> Result<models::FineTuningJob, Error<CancelFineTuningJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuning_job_id = fine_tuning_job_id;

    let uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(p_path_fine_tuning_job_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FineTuningJob`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FineTuningJob`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CancelFineTuningJobError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).  This enables organization owners to share fine-tuned models with other projects in their organization.
#[bon::builder]
pub async fn create_fine_tuning_checkpoint_permission(
    configuration: &configuration::Configuration,
    fine_tuned_model_checkpoint: &str,
    create_fine_tuning_checkpoint_permission_request: models::CreateFineTuningCheckpointPermissionRequest,
) -> Result<
    models::ListFineTuningCheckpointPermissionResponse,
    Error<CreateFineTuningCheckpointPermissionError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuned_model_checkpoint = fine_tuned_model_checkpoint;
    let p_body_create_fine_tuning_checkpoint_permission_request =
        create_fine_tuning_checkpoint_permission_request;

    let uri_str = format!(
        "{}/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions",
        configuration.base_path,
        fine_tuned_model_checkpoint = crate::apis::urlencode(p_path_fine_tuned_model_checkpoint)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_create_fine_tuning_checkpoint_permission_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListFineTuningCheckpointPermissionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListFineTuningCheckpointPermissionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateFineTuningCheckpointPermissionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)
#[bon::builder]
pub async fn create_fine_tuning_job(
    configuration: &configuration::Configuration,
    create_fine_tuning_job_request: models::CreateFineTuningJobRequest,
) -> Result<models::FineTuningJob, Error<CreateFineTuningJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_create_fine_tuning_job_request = create_fine_tuning_job_request;

    let uri_str = format!("{}/fine_tuning/jobs", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_create_fine_tuning_job_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FineTuningJob`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FineTuningJob`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateFineTuningJobError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
#[bon::builder]
pub async fn delete_fine_tuning_checkpoint_permission(
    configuration: &configuration::Configuration,
    fine_tuned_model_checkpoint: &str,
    permission_id: &str,
) -> Result<
    models::DeleteFineTuningCheckpointPermissionResponse,
    Error<DeleteFineTuningCheckpointPermissionError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuned_model_checkpoint = fine_tuned_model_checkpoint;
    let p_path_permission_id = permission_id;

    let uri_str = format!(
        "{}/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}",
        configuration.base_path,
        fine_tuned_model_checkpoint = crate::apis::urlencode(p_path_fine_tuned_model_checkpoint),
        permission_id = crate::apis::urlencode(p_path_permission_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeleteFineTuningCheckpointPermissionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeleteFineTuningCheckpointPermissionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteFineTuningCheckpointPermissionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
#[bon::builder]
pub async fn list_fine_tuning_checkpoint_permissions(
    configuration: &configuration::Configuration,
    fine_tuned_model_checkpoint: &str,
    project_id: Option<&str>,
    after: Option<&str>,
    limit: Option<i32>,
    order: Option<&str>,
) -> Result<
    models::ListFineTuningCheckpointPermissionResponse,
    Error<ListFineTuningCheckpointPermissionsError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuned_model_checkpoint = fine_tuned_model_checkpoint;
    let p_query_project_id = project_id;
    let p_query_after = after;
    let p_query_limit = limit;
    let p_query_order = order;

    let uri_str = format!(
        "{}/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions",
        configuration.base_path,
        fine_tuned_model_checkpoint = crate::apis::urlencode(p_path_fine_tuned_model_checkpoint)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_project_id {
        req_builder = req_builder.query(&[("project_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListFineTuningCheckpointPermissionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListFineTuningCheckpointPermissionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListFineTuningCheckpointPermissionsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get status updates for a fine-tuning job.
#[bon::builder]
pub async fn list_fine_tuning_events(
    configuration: &configuration::Configuration,
    fine_tuning_job_id: &str,
    after: Option<&str>,
    limit: Option<i32>,
) -> Result<models::ListFineTuningJobEventsResponse, Error<ListFineTuningEventsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuning_job_id = fine_tuning_job_id;
    let p_query_after = after;
    let p_query_limit = limit;

    let uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/events",
        configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(p_path_fine_tuning_job_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListFineTuningJobEventsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListFineTuningJobEventsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListFineTuningEventsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List checkpoints for a fine-tuning job.
#[bon::builder]
pub async fn list_fine_tuning_job_checkpoints(
    configuration: &configuration::Configuration,
    fine_tuning_job_id: &str,
    after: Option<&str>,
    limit: Option<i32>,
) -> Result<models::ListFineTuningJobCheckpointsResponse, Error<ListFineTuningJobCheckpointsError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuning_job_id = fine_tuning_job_id;
    let p_query_after = after;
    let p_query_limit = limit;

    let uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(p_path_fine_tuning_job_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListFineTuningJobCheckpointsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListFineTuningJobCheckpointsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListFineTuningJobCheckpointsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List your organization's fine-tuning jobs
#[bon::builder]
pub async fn list_paginated_fine_tuning_jobs(
    configuration: &configuration::Configuration,
    after: Option<&str>,
    limit: Option<i32>,
    metadata: Option<std::collections::HashMap<String, String>>,
) -> Result<models::ListPaginatedFineTuningJobsResponse, Error<ListPaginatedFineTuningJobsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_after = after;
    let p_query_limit = limit;
    let p_query_metadata = metadata;

    let uri_str = format!("{}/fine_tuning/jobs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_metadata {
        let mut query_params = Vec::with_capacity(param_value.len());
        for (key, value) in param_value.iter() {
            query_params.push((key.to_string(), serde_json::to_string(value)?));
        }
        req_builder = req_builder.query(&query_params);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListPaginatedFineTuningJobsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListPaginatedFineTuningJobsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListPaginatedFineTuningJobsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Pause a fine-tune job.
#[bon::builder]
pub async fn pause_fine_tuning_job(
    configuration: &configuration::Configuration,
    fine_tuning_job_id: &str,
) -> Result<models::FineTuningJob, Error<PauseFineTuningJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuning_job_id = fine_tuning_job_id;

    let uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/pause",
        configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(p_path_fine_tuning_job_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FineTuningJob`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FineTuningJob`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PauseFineTuningJobError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Resume a fine-tune job.
#[bon::builder]
pub async fn resume_fine_tuning_job(
    configuration: &configuration::Configuration,
    fine_tuning_job_id: &str,
) -> Result<models::FineTuningJob, Error<ResumeFineTuningJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuning_job_id = fine_tuning_job_id;

    let uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/resume",
        configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(p_path_fine_tuning_job_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FineTuningJob`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FineTuningJob`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ResumeFineTuningJobError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get info about a fine-tuning job.  [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)
#[bon::builder]
pub async fn retrieve_fine_tuning_job(
    configuration: &configuration::Configuration,
    fine_tuning_job_id: &str,
) -> Result<models::FineTuningJob, Error<RetrieveFineTuningJobError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_fine_tuning_job_id = fine_tuning_job_id;

    let uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}",
        configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(p_path_fine_tuning_job_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FineTuningJob`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FineTuningJob`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveFineTuningJobError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Run a grader.
#[bon::builder]
pub async fn run_grader(
    configuration: &configuration::Configuration,
    run_grader_request: models::RunGraderRequest,
) -> Result<models::RunGraderResponse, Error<RunGraderError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_run_grader_request = run_grader_request;

    let uri_str = format!("{}/fine_tuning/alpha/graders/run", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_run_grader_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RunGraderResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RunGraderResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RunGraderError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Validate a grader.
#[bon::builder]
pub async fn validate_grader(
    configuration: &configuration::Configuration,
    validate_grader_request: models::ValidateGraderRequest,
) -> Result<models::ValidateGraderResponse, Error<ValidateGraderError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_validate_grader_request = validate_grader_request;

    let uri_str = format!(
        "{}/fine_tuning/alpha/graders/validate",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_validate_grader_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ValidateGraderResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ValidateGraderResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ValidateGraderError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
