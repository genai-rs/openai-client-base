/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WorkflowParam : Workflow reference and overrides applied to the chat session.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct WorkflowParam {
    /// Identifier for the workflow invoked by the session.
    #[serde(rename = "id")]
    pub id: String,
    /// Specific workflow version to run. Defaults to the latest deployed version.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// State variables forwarded to the workflow. Keys may be up to 64 characters, values must be primitive types, and the map defaults to an empty object.
    #[serde(rename = "state_variables", skip_serializing_if = "Option::is_none")]
    pub state_variables:
        Option<std::collections::HashMap<String, models::WorkflowParamStateVariablesValue>>,
    #[serde(rename = "tracing", skip_serializing_if = "Option::is_none")]
    pub tracing: Option<Box<models::WorkflowTracingParam>>,
}

impl WorkflowParam {
    /// Workflow reference and overrides applied to the chat session.
    pub fn new(id: String) -> WorkflowParam {
        WorkflowParam {
            id,
            version: None,
            state_variables: None,
            tracing: None,
        }
    }
}

impl std::fmt::Display for WorkflowParam {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
