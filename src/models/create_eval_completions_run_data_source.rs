/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateEvalCompletionsRunDataSource : A CompletionsRunDataSource object describing a model sampling configuration.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateEvalCompletionsRunDataSource {
    /// The type of run data source. Always `completions`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "input_messages", skip_serializing_if = "Option::is_none")]
    pub input_messages: Option<Box<models::CreateEvalCompletionsRunDataSourceInputMessages>>,
    #[serde(rename = "sampling_params", skip_serializing_if = "Option::is_none")]
    pub sampling_params: Option<Box<models::CreateEvalCompletionsRunDataSourceSamplingParams>>,
    /// The name of the model to use for generating completions (e.g. \"o3-mini\").
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(rename = "source")]
    pub source: Box<models::CreateEvalCompletionsRunDataSourceSource>,
}

impl CreateEvalCompletionsRunDataSource {
    /// A CompletionsRunDataSource object describing a model sampling configuration.
    pub fn new(
        r#type: Type,
        source: models::CreateEvalCompletionsRunDataSourceSource,
    ) -> CreateEvalCompletionsRunDataSource {
        CreateEvalCompletionsRunDataSource {
            r#type,
            input_messages: None,
            sampling_params: None,
            model: None,
            source: Box::new(source),
        }
    }
}
/// The type of run data source. Always `completions`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "completions")]
    Completions,
}

impl Default for Type {
    fn default() -> Type {
        Self::Completions
    }
}
