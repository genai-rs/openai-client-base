/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BatchUsage : Represents token usage details including input tokens, output tokens, a breakdown of output tokens, and the total tokens used. Only populated on batches created after September 7, 2025.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct BatchUsage {
    /// The number of input tokens.
    #[serde(rename = "input_tokens")]
    pub input_tokens: i32,
    #[serde(rename = "input_tokens_details")]
    pub input_tokens_details: Box<models::BatchUsageInputTokensDetails>,
    /// The number of output tokens.
    #[serde(rename = "output_tokens")]
    pub output_tokens: i32,
    #[serde(rename = "output_tokens_details")]
    pub output_tokens_details: Box<models::BatchUsageOutputTokensDetails>,
    /// The total number of tokens used.
    #[serde(rename = "total_tokens")]
    pub total_tokens: i32,
}

impl BatchUsage {
    /// Represents token usage details including input tokens, output tokens, a breakdown of output tokens, and the total tokens used. Only populated on batches created after September 7, 2025.
    pub fn new(
        input_tokens: i32,
        input_tokens_details: models::BatchUsageInputTokensDetails,
        output_tokens: i32,
        output_tokens_details: models::BatchUsageOutputTokensDetails,
        total_tokens: i32,
    ) -> BatchUsage {
        BatchUsage {
            input_tokens,
            input_tokens_details: Box::new(input_tokens_details),
            output_tokens,
            output_tokens_details: Box::new(output_tokens_details),
            total_tokens,
        }
    }
}

impl std::fmt::Display for BatchUsage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
