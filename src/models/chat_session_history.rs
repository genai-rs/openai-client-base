/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatSessionHistory : History retention preferences returned for the session.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatSessionHistory {
    /// Indicates if chat history is persisted for the session.
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// Number of prior threads surfaced in history views. Defaults to null when all history is retained.
    #[serde(rename = "recent_threads", deserialize_with = "Option::deserialize")]
    pub recent_threads: Option<i32>,
}

impl ChatSessionHistory {
    /// History retention preferences returned for the session.
    pub fn new(enabled: bool, recent_threads: Option<i32>) -> ChatSessionHistory {
        ChatSessionHistory {
            enabled,
            recent_threads,
        }
    }
}

impl std::fmt::Display for ChatSessionHistory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
