/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GraderScoreModel : A ScoreModelGrader object that uses a model to assign a score to the input.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct GraderScoreModel {
    /// The object type, which is always `score_model`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the grader.
    #[serde(rename = "name")]
    pub name: String,
    /// The model to use for the evaluation.
    #[serde(rename = "model")]
    pub model: String,
    /// The sampling parameters for the model.
    #[serde(rename = "sampling_params", skip_serializing_if = "Option::is_none")]
    pub sampling_params: Option<serde_json::Value>,
    /// The input text. This may include template strings.
    #[serde(rename = "input")]
    pub input: Vec<models::EvalItem>,
    /// The range of the score. Defaults to `[0, 1]`.
    #[serde(rename = "range", skip_serializing_if = "Option::is_none")]
    pub range: Option<Vec<f64>>,
}

impl GraderScoreModel {
    /// A ScoreModelGrader object that uses a model to assign a score to the input.
    pub fn new(
        r#type: Type,
        name: String,
        model: String,
        input: Vec<models::EvalItem>,
    ) -> GraderScoreModel {
        GraderScoreModel {
            r#type,
            name,
            model,
            sampling_params: None,
            input,
            range: None,
        }
    }
}
/// The object type, which is always `score_model`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "score_model")]
    ScoreModel,
}

impl Default for Type {
    fn default() -> Type {
        Self::ScoreModel
    }
}
