/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateModerationResponseResultsInnerCategoryAppliedInputTypes : A list of the categories along with the input type(s) that the score applies to.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
    /// The applied input type(s) for the category 'hate'.
    #[serde(rename = "hate")]
    pub hate: Vec<Hate>,
    /// The applied input type(s) for the category 'hate/threatening'.
    #[serde(rename = "hate/threatening")]
    pub hate_slash_threatening: Vec<HateSlashThreatening>,
    /// The applied input type(s) for the category 'harassment'.
    #[serde(rename = "harassment")]
    pub harassment: Vec<Harassment>,
    /// The applied input type(s) for the category 'harassment/threatening'.
    #[serde(rename = "harassment/threatening")]
    pub harassment_slash_threatening: Vec<HarassmentSlashThreatening>,
    /// The applied input type(s) for the category 'illicit'.
    #[serde(rename = "illicit")]
    pub illicit: Vec<Illicit>,
    /// The applied input type(s) for the category 'illicit/violent'.
    #[serde(rename = "illicit/violent")]
    pub illicit_slash_violent: Vec<IllicitSlashViolent>,
    /// The applied input type(s) for the category 'self-harm'.
    #[serde(rename = "self-harm")]
    pub self_harm: Vec<SelfHarm>,
    /// The applied input type(s) for the category 'self-harm/intent'.
    #[serde(rename = "self-harm/intent")]
    pub self_harm_slash_intent: Vec<SelfHarmSlashIntent>,
    /// The applied input type(s) for the category 'self-harm/instructions'.
    #[serde(rename = "self-harm/instructions")]
    pub self_harm_slash_instructions: Vec<SelfHarmSlashInstructions>,
    /// The applied input type(s) for the category 'sexual'.
    #[serde(rename = "sexual")]
    pub sexual: Vec<Sexual>,
    /// The applied input type(s) for the category 'sexual/minors'.
    #[serde(rename = "sexual/minors")]
    pub sexual_slash_minors: Vec<SexualSlashMinors>,
    /// The applied input type(s) for the category 'violence'.
    #[serde(rename = "violence")]
    pub violence: Vec<Violence>,
    /// The applied input type(s) for the category 'violence/graphic'.
    #[serde(rename = "violence/graphic")]
    pub violence_slash_graphic: Vec<ViolenceSlashGraphic>,
}

impl CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
    /// A list of the categories along with the input type(s) that the score applies to.
    pub fn new(
        hate: Vec<Hate>,
        hate_slash_threatening: Vec<HateSlashThreatening>,
        harassment: Vec<Harassment>,
        harassment_slash_threatening: Vec<HarassmentSlashThreatening>,
        illicit: Vec<Illicit>,
        illicit_slash_violent: Vec<IllicitSlashViolent>,
        self_harm: Vec<SelfHarm>,
        self_harm_slash_intent: Vec<SelfHarmSlashIntent>,
        self_harm_slash_instructions: Vec<SelfHarmSlashInstructions>,
        sexual: Vec<Sexual>,
        sexual_slash_minors: Vec<SexualSlashMinors>,
        violence: Vec<Violence>,
        violence_slash_graphic: Vec<ViolenceSlashGraphic>,
    ) -> CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
        CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
            hate,
            hate_slash_threatening,
            harassment,
            harassment_slash_threatening,
            illicit,
            illicit_slash_violent,
            self_harm,
            self_harm_slash_intent,
            self_harm_slash_instructions,
            sexual,
            sexual_slash_minors,
            violence,
            violence_slash_graphic,
        }
    }
}
/// The applied input type(s) for the category 'hate'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Hate {
    #[serde(rename = "text")]
    Text,
}

impl Default for Hate {
    fn default() -> Hate {
        Self::Text
    }
}
/// The applied input type(s) for the category 'hate/threatening'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HateSlashThreatening {
    #[serde(rename = "text")]
    Text,
}

impl Default for HateSlashThreatening {
    fn default() -> HateSlashThreatening {
        Self::Text
    }
}
/// The applied input type(s) for the category 'harassment'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Harassment {
    #[serde(rename = "text")]
    Text,
}

impl Default for Harassment {
    fn default() -> Harassment {
        Self::Text
    }
}
/// The applied input type(s) for the category 'harassment/threatening'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HarassmentSlashThreatening {
    #[serde(rename = "text")]
    Text,
}

impl Default for HarassmentSlashThreatening {
    fn default() -> HarassmentSlashThreatening {
        Self::Text
    }
}
/// The applied input type(s) for the category 'illicit'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Illicit {
    #[serde(rename = "text")]
    Text,
}

impl Default for Illicit {
    fn default() -> Illicit {
        Self::Text
    }
}
/// The applied input type(s) for the category 'illicit/violent'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IllicitSlashViolent {
    #[serde(rename = "text")]
    Text,
}

impl Default for IllicitSlashViolent {
    fn default() -> IllicitSlashViolent {
        Self::Text
    }
}
/// The applied input type(s) for the category 'self-harm'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SelfHarm {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
}

impl Default for SelfHarm {
    fn default() -> SelfHarm {
        Self::Text
    }
}
/// The applied input type(s) for the category 'self-harm/intent'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SelfHarmSlashIntent {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
}

impl Default for SelfHarmSlashIntent {
    fn default() -> SelfHarmSlashIntent {
        Self::Text
    }
}
/// The applied input type(s) for the category 'self-harm/instructions'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SelfHarmSlashInstructions {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
}

impl Default for SelfHarmSlashInstructions {
    fn default() -> SelfHarmSlashInstructions {
        Self::Text
    }
}
/// The applied input type(s) for the category 'sexual'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sexual {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
}

impl Default for Sexual {
    fn default() -> Sexual {
        Self::Text
    }
}
/// The applied input type(s) for the category 'sexual/minors'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SexualSlashMinors {
    #[serde(rename = "text")]
    Text,
}

impl Default for SexualSlashMinors {
    fn default() -> SexualSlashMinors {
        Self::Text
    }
}
/// The applied input type(s) for the category 'violence'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Violence {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
}

impl Default for Violence {
    fn default() -> Violence {
        Self::Text
    }
}
/// The applied input type(s) for the category 'violence/graphic'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ViolenceSlashGraphic {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
}

impl Default for ViolenceSlashGraphic {
    fn default() -> ViolenceSlashGraphic {
        Self::Text
    }
}

impl std::fmt::Display for CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
