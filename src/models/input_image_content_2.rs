/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InputImageContent2 {
    /// The type of the input item. Always `input_image`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
    #[serde(rename = "image_url", deserialize_with = "Option::deserialize")]
    pub image_url: Option<String>,
    /// The ID of the file to be sent to the model.
    #[serde(rename = "file_id", deserialize_with = "Option::deserialize")]
    pub file_id: Option<String>,
    /// The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
    #[serde(rename = "detail")]
    pub detail: Detail,
}

impl InputImageContent2 {
    pub fn new(r#type: Type, image_url: Option<String>, file_id: Option<String>, detail: Detail) -> InputImageContent2 {
        InputImageContent2 {
            r#type,
            image_url,
            file_id,
            detail,
        }
    }
}
/// The type of the input item. Always `input_image`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "input_image")]
    InputImage,
}

impl Default for Type {
    fn default() -> Type {
        Self::InputImage
    }
}
/// The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Detail {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Detail {
    fn default() -> Detail {
        Self::Low
    }
}

