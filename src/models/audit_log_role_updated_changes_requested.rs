/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuditLogRoleUpdatedChangesRequested : The payload used to update the role.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct AuditLogRoleUpdatedChangesRequested {
    /// The updated role name, when provided.
    #[serde(rename = "role_name", skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    /// The resource the role is scoped to.
    #[serde(rename = "resource_id", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    /// The type of resource the role belongs to.
    #[serde(rename = "resource_type", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    /// The permissions added to the role.
    #[serde(rename = "permissions_added", skip_serializing_if = "Option::is_none")]
    pub permissions_added: Option<Vec<String>>,
    /// The permissions removed from the role.
    #[serde(
        rename = "permissions_removed",
        skip_serializing_if = "Option::is_none"
    )]
    pub permissions_removed: Option<Vec<String>>,
    /// The updated role description, when provided.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Additional metadata stored on the role.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}

impl AuditLogRoleUpdatedChangesRequested {
    /// The payload used to update the role.
    pub fn new() -> AuditLogRoleUpdatedChangesRequested {
        AuditLogRoleUpdatedChangesRequested {
            role_name: None,
            resource_id: None,
            resource_type: None,
            permissions_added: None,
            permissions_removed: None,
            description: None,
            metadata: None,
        }
    }
}

impl std::fmt::Display for AuditLogRoleUpdatedChangesRequested {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
