/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LockedStatus : Indicates that a thread is locked and cannot accept new input.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct LockedStatus {
    /// Status discriminator that is always `locked`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Reason that the thread was locked. Defaults to null when no reason is recorded.
    #[serde(rename = "reason", deserialize_with = "Option::deserialize")]
    pub reason: Option<String>,
}

impl LockedStatus {
    /// Indicates that a thread is locked and cannot accept new input.
    pub fn new(r#type: Type, reason: Option<String>) -> LockedStatus {
        LockedStatus { r#type, reason }
    }
}
/// Status discriminator that is always `locked`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "locked")]
    Locked,
}

impl Default for Type {
    fn default() -> Type {
        Self::Locked
    }
}

impl std::fmt::Display for LockedStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
