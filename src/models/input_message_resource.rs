/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InputMessageResource {
    /// The type of the message input. Always set to `message`.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The role of the message input. One of `user`, `system`, or `developer`.
    #[serde(rename = "role")]
    pub role: Role,
    /// The status of item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// A list of one or many input items to the model, containing different content  types.
    #[serde(rename = "content")]
    pub content: Vec<models::InputContent>,
    /// The unique ID of the message input.
    #[serde(rename = "id")]
    pub id: String,
}

impl InputMessageResource {
    pub fn new(role: Role, content: Vec<models::InputContent>, id: String) -> InputMessageResource {
        InputMessageResource {
            r#type: None,
            role,
            status: None,
            content,
            id,
        }
    }
}
/// The type of the message input. Always set to `message`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "message")]
    Message,
}

impl Default for Type {
    fn default() -> Type {
        Self::Message
    }
}
/// The role of the message input. One of `user`, `system`, or `developer`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "developer")]
    Developer,
}

impl Default for Role {
    fn default() -> Role {
        Self::User
    }
}
/// The status of item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "incomplete")]
    Incomplete,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}
