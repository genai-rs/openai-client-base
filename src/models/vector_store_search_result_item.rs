/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct VectorStoreSearchResultItem {
    /// The ID of the vector store file.
    #[serde(rename = "file_id")]
    pub file_id: String,
    /// The name of the vector store file.
    #[serde(rename = "filename")]
    pub filename: String,
    /// The similarity score for the result.
    #[serde(rename = "score")]
    pub score: f64,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters, booleans, or numbers.
    #[serde(rename = "attributes", deserialize_with = "Option::deserialize")]
    pub attributes:
        Option<std::collections::HashMap<String, models::VectorStoreFileAttributesValue>>,
    /// Content chunks from the file.
    #[serde(rename = "content")]
    pub content: Vec<models::VectorStoreSearchResultContentObject>,
}

impl VectorStoreSearchResultItem {
    pub fn new(
        file_id: String,
        filename: String,
        score: f64,
        attributes: Option<
            std::collections::HashMap<String, models::VectorStoreFileAttributesValue>,
        >,
        content: Vec<models::VectorStoreSearchResultContentObject>,
    ) -> VectorStoreSearchResultItem {
        VectorStoreSearchResultItem {
            file_id,
            filename,
            score,
            attributes,
            content,
        }
    }
}
