/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LocalShellTool : A tool that allows the model to execute shell commands in a local environment. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct LocalShellTool {
    /// The type of the local shell tool. Always `local_shell`.
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl LocalShellTool {
    /// A tool that allows the model to execute shell commands in a local environment. 
    pub fn new(r#type: Type) -> LocalShellTool {
        LocalShellTool {
            r#type,
        }
    }
}
/// The type of the local shell tool. Always `local_shell`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "local_shell")]
    LocalShell,
}

impl Default for Type {
    fn default() -> Type {
        Self::LocalShell
    }
}



impl std::fmt::Display for LocalShellTool {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
