/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateTranscription200Response {
    /// The transcribed text.
    #[serde(rename = "text")]
    pub text: String,
    /// The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array. 
    #[serde(rename = "logprobs", skip_serializing_if = "Option::is_none")]
    pub logprobs: Option<Vec<models::CreateTranscriptionResponseJsonLogprobsInner>>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<Box<models::TranscriptTextUsageDuration>>,
    /// The language of the input audio.
    #[serde(rename = "language")]
    pub language: String,
    /// The duration of the input audio.
    #[serde(rename = "duration")]
    pub duration: f64,
    /// Extracted words and their corresponding timestamps.
    #[serde(rename = "words", skip_serializing_if = "Option::is_none")]
    pub words: Option<Vec<models::TranscriptionWord>>,
    /// Segments of the transcribed text and their corresponding details.
    #[serde(rename = "segments", skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<models::TranscriptionSegment>>,
}

impl CreateTranscription200Response {
    pub fn new(text: String, language: String, duration: f64) -> CreateTranscription200Response {
        CreateTranscription200Response {
            text,
            logprobs: None,
            usage: None,
            language,
            duration,
            words: None,
            segments: None,
        }
    }
}



impl std::fmt::Display for CreateTranscription200Response {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
