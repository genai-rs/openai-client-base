/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FilePartResource : Metadata for a non-image file uploaded through ChatKit.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FilePartResource {
    /// Unique identifier for the uploaded file.
    #[serde(rename = "id")]
    pub id: String,
    /// Type discriminator that is always `file`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Original filename supplied by the uploader. Defaults to null when unnamed.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    /// MIME type reported for the uploaded file. Defaults to null when unknown.
    #[serde(rename = "mime_type", deserialize_with = "Option::deserialize")]
    pub mime_type: Option<String>,
    /// Signed URL for downloading the uploaded file. Defaults to null when no download link is available.
    #[serde(rename = "upload_url", deserialize_with = "Option::deserialize")]
    pub upload_url: Option<String>,
}

impl FilePartResource {
    /// Metadata for a non-image file uploaded through ChatKit.
    pub fn new(
        id: String,
        r#type: Type,
        name: Option<String>,
        mime_type: Option<String>,
        upload_url: Option<String>,
    ) -> FilePartResource {
        FilePartResource {
            id,
            r#type,
            name,
            mime_type,
            upload_url,
        }
    }
}
/// Type discriminator that is always `file`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file")]
    File,
}

impl Default for Type {
    fn default() -> Type {
        Self::File
    }
}

impl std::fmt::Display for FilePartResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
