/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FineTuneMethod : The method used for fine-tuning.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FineTuneMethod {
    /// The type of method. Is either `supervised`, `dpo`, or `reinforcement`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "supervised", skip_serializing_if = "Option::is_none")]
    pub supervised: Option<Box<models::FineTuneSupervisedMethod>>,
    #[serde(rename = "dpo", skip_serializing_if = "Option::is_none")]
    pub dpo: Option<Box<models::FineTuneDpoMethod>>,
    #[serde(rename = "reinforcement", skip_serializing_if = "Option::is_none")]
    pub reinforcement: Option<Box<models::FineTuneReinforcementMethod>>,
}

impl FineTuneMethod {
    /// The method used for fine-tuning.
    pub fn new(r#type: Type) -> FineTuneMethod {
        FineTuneMethod {
            r#type,
            supervised: None,
            dpo: None,
            reinforcement: None,
        }
    }
}
/// The type of method. Is either `supervised`, `dpo`, or `reinforcement`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "supervised")]
    Supervised,
    #[serde(rename = "dpo")]
    Dpo,
    #[serde(rename = "reinforcement")]
    Reinforcement,
}

impl Default for Type {
    fn default() -> Type {
        Self::Supervised
    }
}



impl std::fmt::Display for FineTuneMethod {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
