/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FineTuneChatRequestInputMessagesInner {
    /// The contents of the function message.
    #[serde(rename = "content")]
    pub content: String,
    /// The role of the messages author, in this case `function`.
    #[serde(rename = "role")]
    pub role: Role,
    /// The name of the function to call.
    #[serde(rename = "name")]
    pub name: String,
    /// Controls whether the assistant message is trained against (0 or 1)
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Weight>,
    /// The refusal message by the assistant.
    #[serde(rename = "refusal", skip_serializing_if = "Option::is_none")]
    pub refusal: Option<String>,
    #[serde(
        rename = "audio",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub audio: Option<Option<Box<models::ChatCompletionRequestAssistantMessageAudio>>>,
    /// The tool calls generated by the model, such as function calls.
    #[serde(rename = "tool_calls", skip_serializing_if = "Option::is_none")]
    pub tool_calls: Option<Vec<models::ChatCompletionMessageToolCallsInner>>,
    #[serde(
        rename = "function_call",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub function_call:
        Option<Option<Box<models::ChatCompletionRequestAssistantMessageFunctionCall>>>,
    /// Tool call that this message is responding to.
    #[serde(rename = "tool_call_id")]
    pub tool_call_id: String,
}

impl FineTuneChatRequestInputMessagesInner {
    pub fn new(
        content: String,
        role: Role,
        name: String,
        tool_call_id: String,
    ) -> FineTuneChatRequestInputMessagesInner {
        FineTuneChatRequestInputMessagesInner {
            content,
            role,
            name,
            weight: None,
            refusal: None,
            audio: None,
            tool_calls: None,
            function_call: None,
            tool_call_id,
        }
    }
}
/// The role of the messages author, in this case `function`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "function")]
    Function,
}

impl Default for Role {
    fn default() -> Role {
        Self::Function
    }
}
/// Controls whether the assistant message is trained against (0 or 1)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Weight {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for Weight {
    fn default() -> Weight {
        Self::Variant0
    }
}
