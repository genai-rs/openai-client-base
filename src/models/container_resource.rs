/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ContainerResource {
    /// Unique identifier for the container.
    #[serde(rename = "id")]
    pub id: String,
    /// The type of this object.
    #[serde(rename = "object")]
    pub object: String,
    /// Name of the container.
    #[serde(rename = "name")]
    pub name: String,
    /// Unix timestamp (in seconds) when the container was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// Status of the container (e.g., active, deleted).
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "expires_after", skip_serializing_if = "Option::is_none")]
    pub expires_after: Option<Box<models::ContainerResourceExpiresAfter>>,
}

impl ContainerResource {
    pub fn new(
        id: String,
        object: String,
        name: String,
        created_at: i32,
        status: String,
    ) -> ContainerResource {
        ContainerResource {
            id,
            object,
            name,
            created_at,
            status,
            expires_after: None,
        }
    }
}

impl std::fmt::Display for ContainerResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
