/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeTranscriptionSessionCreateRequest : Realtime transcription session object configuration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeTranscriptionSessionCreateRequest {
    #[serde(rename = "turn_detection", skip_serializing_if = "Option::is_none")]
    pub turn_detection: Option<Box<models::RealtimeTranscriptionSessionCreateRequestTurnDetection>>,
    #[serde(rename = "input_audio_noise_reduction", skip_serializing_if = "Option::is_none")]
    pub input_audio_noise_reduction: Option<Box<models::RealtimeSessionInputAudioNoiseReduction>>,
    /// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel (mono), and little-endian byte order. 
    #[serde(rename = "input_audio_format", skip_serializing_if = "Option::is_none")]
    pub input_audio_format: Option<InputAudioFormat>,
    #[serde(rename = "input_audio_transcription", skip_serializing_if = "Option::is_none")]
    pub input_audio_transcription: Option<Box<models::AudioTranscription>>,
    /// The set of items to include in the transcription. Current available items are: `item.input_audio_transcription.logprobs` 
    #[serde(rename = "include", skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<Include>>,
}

impl RealtimeTranscriptionSessionCreateRequest {
    /// Realtime transcription session object configuration.
    pub fn new() -> RealtimeTranscriptionSessionCreateRequest {
        RealtimeTranscriptionSessionCreateRequest {
            turn_detection: None,
            input_audio_noise_reduction: None,
            input_audio_format: None,
            input_audio_transcription: None,
            include: None,
        }
    }
}
/// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel (mono), and little-endian byte order. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InputAudioFormat {
    #[serde(rename = "pcm16")]
    Pcm16,
    #[serde(rename = "g711_ulaw")]
    G711Ulaw,
    #[serde(rename = "g711_alaw")]
    G711Alaw,
}

impl Default for InputAudioFormat {
    fn default() -> InputAudioFormat {
        Self::Pcm16
    }
}
/// The set of items to include in the transcription. Current available items are: `item.input_audio_transcription.logprobs` 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Include {
    #[serde(rename = "item.input_audio_transcription.logprobs")]
    ItemInputAudioTranscriptionLogprobs,
}

impl Default for Include {
    fn default() -> Include {
        Self::ItemInputAudioTranscriptionLogprobs
    }
}



impl std::fmt::Display for RealtimeTranscriptionSessionCreateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
