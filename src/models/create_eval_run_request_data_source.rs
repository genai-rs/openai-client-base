/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateEvalRunRequestDataSource : Details about the run's data source.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateEvalRunRequestDataSource {
    /// The type of data source. Always `jsonl`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "source")]
    pub source: Box<models::CreateEvalResponsesRunDataSourceSource>,
    #[serde(rename = "input_messages", skip_serializing_if = "Option::is_none")]
    pub input_messages: Option<Box<models::CreateEvalResponsesRunDataSourceInputMessages>>,
    #[serde(rename = "sampling_params", skip_serializing_if = "Option::is_none")]
    pub sampling_params: Option<Box<models::CreateEvalResponsesRunDataSourceSamplingParams>>,
    /// The name of the model to use for generating completions (e.g. \"o3-mini\").
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

impl CreateEvalRunRequestDataSource {
    /// Details about the run's data source.
    pub fn new(
        r#type: Type,
        source: models::CreateEvalResponsesRunDataSourceSource,
    ) -> CreateEvalRunRequestDataSource {
        CreateEvalRunRequestDataSource {
            r#type,
            source: Box::new(source),
            input_messages: None,
            sampling_params: None,
            model: None,
        }
    }
}
/// The type of data source. Always `jsonl`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "jsonl")]
    Jsonl,
    #[serde(rename = "completions")]
    Completions,
    #[serde(rename = "responses")]
    Responses,
}

impl Default for Type {
    fn default() -> Type {
        Self::Jsonl
    }
}
