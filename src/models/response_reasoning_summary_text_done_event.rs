/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseReasoningSummaryTextDoneEvent : Emitted when a reasoning summary text is completed.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseReasoningSummaryTextDoneEvent {
    /// The type of the event. Always `response.reasoning_summary_text.done`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the item this summary text is associated with. 
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the output item this summary text is associated with. 
    #[serde(rename = "output_index")]
    pub output_index: i32,
    /// The index of the summary part within the reasoning summary. 
    #[serde(rename = "summary_index")]
    pub summary_index: i32,
    /// The full text of the completed reasoning summary. 
    #[serde(rename = "text")]
    pub text: String,
    /// The sequence number of this event. 
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
}

impl ResponseReasoningSummaryTextDoneEvent {
    /// Emitted when a reasoning summary text is completed.
    pub fn new(r#type: Type, item_id: String, output_index: i32, summary_index: i32, text: String, sequence_number: i32) -> ResponseReasoningSummaryTextDoneEvent {
        ResponseReasoningSummaryTextDoneEvent {
            r#type,
            item_id,
            output_index,
            summary_index,
            text,
            sequence_number,
        }
    }
}
/// The type of the event. Always `response.reasoning_summary_text.done`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.reasoning_summary_text.done")]
    ResponseReasoningSummaryTextDone,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseReasoningSummaryTextDone
    }
}

