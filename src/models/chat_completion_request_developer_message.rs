/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatCompletionRequestDeveloperMessage : Developer-provided instructions that the model should follow, regardless of messages sent by the user. With o1 models and newer, `developer` messages replace the previous `system` messages.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionRequestDeveloperMessage {
    #[serde(rename = "content")]
    pub content: Box<models::ChatCompletionRequestDeveloperMessageContent>,
    /// The role of the messages author, in this case `developer`.
    #[serde(rename = "role")]
    pub role: Role,
    /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl ChatCompletionRequestDeveloperMessage {
    /// Developer-provided instructions that the model should follow, regardless of messages sent by the user. With o1 models and newer, `developer` messages replace the previous `system` messages.
    pub fn new(
        content: models::ChatCompletionRequestDeveloperMessageContent,
        role: Role,
    ) -> ChatCompletionRequestDeveloperMessage {
        ChatCompletionRequestDeveloperMessage {
            content: Box::new(content),
            role,
            name: None,
        }
    }
}
/// The role of the messages author, in this case `developer`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "developer")]
    Developer,
}

impl Default for Role {
    fn default() -> Role {
        Self::Developer
    }
}
