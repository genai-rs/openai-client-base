/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ComputerCallSafetyCheckParam : A pending safety check for the computer call.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ComputerCallSafetyCheckParam {
    /// The ID of the pending safety check.
    #[serde(rename = "id")]
    pub id: String,
    /// The type of the pending safety check.
    #[serde(rename = "code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub code: Option<Option<String>>,
    /// Details about the pending safety check.
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<String>>,
}

impl ComputerCallSafetyCheckParam {
    /// A pending safety check for the computer call.
    pub fn new(id: String) -> ComputerCallSafetyCheckParam {
        ComputerCallSafetyCheckParam {
            id,
            code: None,
            message: None,
        }
    }
}



impl std::fmt::Display for ComputerCallSafetyCheckParam {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
