/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct UsageResponse {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "data")]
    pub data: Vec<models::UsageTimeBucket>,
    #[serde(rename = "has_more")]
    pub has_more: bool,
    #[serde(rename = "next_page")]
    pub next_page: String,
}

impl UsageResponse {
    pub fn new(object: Object, data: Vec<models::UsageTimeBucket>, has_more: bool, next_page: String) -> UsageResponse {
        UsageResponse {
            object,
            data,
            has_more,
            next_page,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "page")]
    Page,
}

impl Default for Object {
    fn default() -> Object {
        Self::Page
    }
}



impl std::fmt::Display for UsageResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
