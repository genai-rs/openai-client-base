/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Attachment : Attachment metadata included on thread items.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct Attachment {
    #[serde(rename = "type")]
    pub r#type: models::AttachmentType,
    /// Identifier for the attachment.
    #[serde(rename = "id")]
    pub id: String,
    /// Original display name for the attachment.
    #[serde(rename = "name")]
    pub name: String,
    /// MIME type of the attachment.
    #[serde(rename = "mime_type")]
    pub mime_type: String,
    /// Preview URL for rendering the attachment inline.
    #[serde(rename = "preview_url", deserialize_with = "Option::deserialize")]
    pub preview_url: Option<String>,
}

impl Attachment {
    /// Attachment metadata included on thread items.
    pub fn new(r#type: models::AttachmentType, id: String, name: String, mime_type: String, preview_url: Option<String>) -> Attachment {
        Attachment {
            r#type,
            id,
            name,
            mime_type,
            preview_url,
        }
    }
}



impl std::fmt::Display for Attachment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
