/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatCompletionNamedToolChoiceCustom : Specifies a tool the model should use. Use to force the model to call a specific custom tool.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionNamedToolChoiceCustom {
    /// For custom tool calling, the type is always `custom`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "custom")]
    pub custom: Box<models::ChatCompletionNamedToolChoiceCustomCustom>,
}

impl ChatCompletionNamedToolChoiceCustom {
    /// Specifies a tool the model should use. Use to force the model to call a specific custom tool.
    pub fn new(r#type: Type, custom: models::ChatCompletionNamedToolChoiceCustomCustom) -> ChatCompletionNamedToolChoiceCustom {
        ChatCompletionNamedToolChoiceCustom {
            r#type,
            custom: Box::new(custom),
        }
    }
}
/// For custom tool calling, the type is always `custom`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Type {
    fn default() -> Type {
        Self::Custom
    }
}



impl std::fmt::Display for ChatCompletionNamedToolChoiceCustom {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
