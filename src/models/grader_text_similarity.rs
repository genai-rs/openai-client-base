/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GraderTextSimilarity : A TextSimilarityGrader object which grades text based on similarity metrics.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct GraderTextSimilarity {
    /// The type of grader.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the grader.
    #[serde(rename = "name")]
    pub name: String,
    /// The text being graded.
    #[serde(rename = "input")]
    pub input: String,
    /// The text being graded against.
    #[serde(rename = "reference")]
    pub reference: String,
    /// The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`,  `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,  or `rouge_l`.
    #[serde(rename = "evaluation_metric")]
    pub evaluation_metric: EvaluationMetric,
}

impl GraderTextSimilarity {
    /// A TextSimilarityGrader object which grades text based on similarity metrics.
    pub fn new(
        r#type: Type,
        name: String,
        input: String,
        reference: String,
        evaluation_metric: EvaluationMetric,
    ) -> GraderTextSimilarity {
        GraderTextSimilarity {
            r#type,
            name,
            input,
            reference,
            evaluation_metric,
        }
    }
}
/// The type of grader.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text_similarity")]
    TextSimilarity,
}

impl Default for Type {
    fn default() -> Type {
        Self::TextSimilarity
    }
}
/// The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`,  `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,  or `rouge_l`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EvaluationMetric {
    #[serde(rename = "cosine")]
    Cosine,
    #[serde(rename = "fuzzy_match")]
    FuzzyMatch,
    #[serde(rename = "bleu")]
    Bleu,
    #[serde(rename = "gleu")]
    Gleu,
    #[serde(rename = "meteor")]
    Meteor,
    #[serde(rename = "rouge_1")]
    Rouge1,
    #[serde(rename = "rouge_2")]
    Rouge2,
    #[serde(rename = "rouge_3")]
    Rouge3,
    #[serde(rename = "rouge_4")]
    Rouge4,
    #[serde(rename = "rouge_5")]
    Rouge5,
    #[serde(rename = "rouge_l")]
    RougeL,
}

impl Default for EvaluationMetric {
    fn default() -> EvaluationMetric {
        Self::Cosine
    }
}

impl std::fmt::Display for GraderTextSimilarity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
