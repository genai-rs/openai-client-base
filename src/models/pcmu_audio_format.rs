/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PcmuAudioFormat : The G.711 μ-law format.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct PcmuAudioFormat {
    /// The audio format. Always `audio/pcmu`.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl PcmuAudioFormat {
    /// The G.711 μ-law format.
    pub fn new() -> PcmuAudioFormat {
        PcmuAudioFormat {
            r#type: None,
        }
    }
}
/// The audio format. Always `audio/pcmu`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "audio/pcmu")]
    AudioSlashPcmu,
}

impl Default for Type {
    fn default() -> Type {
        Self::AudioSlashPcmu
    }
}



impl std::fmt::Display for PcmuAudioFormat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
