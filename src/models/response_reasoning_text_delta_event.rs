/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseReasoningTextDeltaEvent : Emitted when a delta is added to a reasoning text.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseReasoningTextDeltaEvent {
    /// The type of the event. Always `response.reasoning_text.delta`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the item this reasoning text delta is associated with.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the output item this reasoning text delta is associated with.
    #[serde(rename = "output_index")]
    pub output_index: i32,
    /// The index of the reasoning content part this delta is associated with.
    #[serde(rename = "content_index")]
    pub content_index: i32,
    /// The text delta that was added to the reasoning content.
    #[serde(rename = "delta")]
    pub delta: String,
    /// The sequence number of this event.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
}

impl ResponseReasoningTextDeltaEvent {
    /// Emitted when a delta is added to a reasoning text.
    pub fn new(
        r#type: Type,
        item_id: String,
        output_index: i32,
        content_index: i32,
        delta: String,
        sequence_number: i32,
    ) -> ResponseReasoningTextDeltaEvent {
        ResponseReasoningTextDeltaEvent {
            r#type,
            item_id,
            output_index,
            content_index,
            delta,
            sequence_number,
        }
    }
}
/// The type of the event. Always `response.reasoning_text.delta`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.reasoning_text.delta")]
    ResponseReasoningTextDelta,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseReasoningTextDelta
    }
}
