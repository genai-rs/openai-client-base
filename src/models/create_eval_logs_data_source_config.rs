/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateEvalLogsDataSourceConfig : A data source config which specifies the metadata property of your logs query. This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateEvalLogsDataSourceConfig {
    /// The type of data source. Always `logs`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Metadata filters for the logs data source.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl CreateEvalLogsDataSourceConfig {
    /// A data source config which specifies the metadata property of your logs query. This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
    pub fn new(r#type: Type) -> CreateEvalLogsDataSourceConfig {
        CreateEvalLogsDataSourceConfig {
            r#type,
            metadata: None,
        }
    }
}
/// The type of data source. Always `logs`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "logs")]
    Logs,
}

impl Default for Type {
    fn default() -> Type {
        Self::Logs
    }
}
