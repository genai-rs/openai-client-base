/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventConversationItemInputAudioTranscriptionCompletedUsage : Usage statistics for the transcription, this is billed according to the ASR model's pricing rather than the realtime model's pricing.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeServerEventConversationItemInputAudioTranscriptionCompletedUsage {
    /// The type of the usage object. Always `tokens` for this variant.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Number of input tokens billed for this request.
    #[serde(rename = "input_tokens")]
    pub input_tokens: i32,
    #[serde(rename = "input_token_details", skip_serializing_if = "Option::is_none")]
    pub input_token_details: Option<Box<models::TranscriptTextUsageTokensInputTokenDetails>>,
    /// Number of output tokens generated.
    #[serde(rename = "output_tokens")]
    pub output_tokens: i32,
    /// Total number of tokens used (input + output).
    #[serde(rename = "total_tokens")]
    pub total_tokens: i32,
    /// Duration of the input audio in seconds.
    #[serde(rename = "seconds")]
    pub seconds: f64,
}

impl RealtimeServerEventConversationItemInputAudioTranscriptionCompletedUsage {
    /// Usage statistics for the transcription, this is billed according to the ASR model's pricing rather than the realtime model's pricing.
    pub fn new(r#type: Type, input_tokens: i32, output_tokens: i32, total_tokens: i32, seconds: f64) -> RealtimeServerEventConversationItemInputAudioTranscriptionCompletedUsage {
        RealtimeServerEventConversationItemInputAudioTranscriptionCompletedUsage {
            r#type,
            input_tokens,
            input_token_details: None,
            output_tokens,
            total_tokens,
            seconds,
        }
    }
}
/// The type of the usage object. Always `tokens` for this variant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "tokens")]
    Tokens,
    #[serde(rename = "duration")]
    Duration,
}

impl Default for Type {
    fn default() -> Type {
        Self::Tokens
    }
}

