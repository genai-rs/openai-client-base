/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InputAudioInputAudio {
    /// Base64-encoded audio data. 
    #[serde(rename = "data")]
    pub data: String,
    /// The format of the audio data. Currently supported formats are `mp3` and `wav`. 
    #[serde(rename = "format")]
    pub format: Format,
}

impl InputAudioInputAudio {
    pub fn new(data: String, format: Format) -> InputAudioInputAudio {
        InputAudioInputAudio {
            data,
            format,
        }
    }
}
/// The format of the audio data. Currently supported formats are `mp3` and `wav`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Format {
    #[serde(rename = "mp3")]
    Mp3,
    #[serde(rename = "wav")]
    Wav,
}

impl Default for Format {
    fn default() -> Format {
        Self::Mp3
    }
}



impl std::fmt::Display for InputAudioInputAudio {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
