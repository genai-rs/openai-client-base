/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaClientEventResponseCancel : Send this event to cancel an in-progress response. The server will respond  with a `response.done` event with a status of `response.status=cancelled`. If  there is no response to cancel, the server will respond with an error.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaClientEventResponseCancel {
    /// Optional client-generated ID used to identify this event.
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    /// A specific response ID to cancel - if not provided, will cancel an  in-progress response in the default conversation.
    #[serde(rename = "response_id", skip_serializing_if = "Option::is_none")]
    pub response_id: Option<String>,
}

impl RealtimeBetaClientEventResponseCancel {
    /// Send this event to cancel an in-progress response. The server will respond  with a `response.done` event with a status of `response.status=cancelled`. If  there is no response to cancel, the server will respond with an error.
    pub fn new(r#type: Option<serde_json::Value>) -> RealtimeBetaClientEventResponseCancel {
        RealtimeBetaClientEventResponseCancel {
            event_id: None,
            r#type,
            response_id: None,
        }
    }
}
