/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateChatSessionBody : Parameters for provisioning a new ChatKit session.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateChatSessionBody {
    #[serde(rename = "workflow")]
    pub workflow: Box<models::WorkflowParam>,
    /// A free-form string that identifies your end user; ensures this Session can access other objects that have the same `user` scope.
    #[serde(rename = "user")]
    pub user: String,
    #[serde(rename = "expires_after", skip_serializing_if = "Option::is_none")]
    pub expires_after: Option<Box<models::ExpiresAfterParam>>,
    #[serde(rename = "rate_limits", skip_serializing_if = "Option::is_none")]
    pub rate_limits: Option<Box<models::RateLimitsParam>>,
    #[serde(rename = "chatkit_configuration", skip_serializing_if = "Option::is_none")]
    pub chatkit_configuration: Option<Box<models::ChatkitConfigurationParam>>,
}

impl CreateChatSessionBody {
    /// Parameters for provisioning a new ChatKit session.
    pub fn new(workflow: models::WorkflowParam, user: String) -> CreateChatSessionBody {
        CreateChatSessionBody {
            workflow: Box::new(workflow),
            user,
            expires_after: None,
            rate_limits: None,
            chatkit_configuration: None,
        }
    }
}



impl std::fmt::Display for CreateChatSessionBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
