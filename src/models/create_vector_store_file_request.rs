/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateVectorStoreFileRequest {
    /// A [File](https://platform.openai.com/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
    #[serde(rename = "file_id")]
    pub file_id: String,
    #[serde(rename = "chunking_strategy", skip_serializing_if = "Option::is_none")]
    pub chunking_strategy: Option<Box<models::ChunkingStrategyRequestParam>>,
    /// Set of 16 key-value pairs that can be attached to an object. This can be  useful for storing additional information about the object in a structured  format, and querying for objects via API or the dashboard. Keys are strings  with a maximum length of 64 characters. Values are strings with a maximum  length of 512 characters, booleans, or numbers. 
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, models::VectorStoreFileAttributesValue>>,
}

impl CreateVectorStoreFileRequest {
    pub fn new(file_id: String) -> CreateVectorStoreFileRequest {
        CreateVectorStoreFileRequest {
            file_id,
            chunking_strategy: None,
            attributes: None,
        }
    }
}

