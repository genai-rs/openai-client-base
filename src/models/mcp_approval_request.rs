/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// McpApprovalRequest : A request for human approval of a tool invocation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct McpApprovalRequest {
    /// The type of the item. Always `mcp_approval_request`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The unique ID of the approval request.
    #[serde(rename = "id")]
    pub id: String,
    /// The label of the MCP server making the request.
    #[serde(rename = "server_label")]
    pub server_label: String,
    /// The name of the tool to run.
    #[serde(rename = "name")]
    pub name: String,
    /// A JSON string of arguments for the tool.
    #[serde(rename = "arguments")]
    pub arguments: String,
}

impl McpApprovalRequest {
    /// A request for human approval of a tool invocation.
    pub fn new(
        r#type: Type,
        id: String,
        server_label: String,
        name: String,
        arguments: String,
    ) -> McpApprovalRequest {
        McpApprovalRequest {
            r#type,
            id,
            server_label,
            name,
            arguments,
        }
    }
}
/// The type of the item. Always `mcp_approval_request`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "mcp_approval_request")]
    McpApprovalRequest,
}

impl Default for Type {
    fn default() -> Type {
        Self::McpApprovalRequest
    }
}
