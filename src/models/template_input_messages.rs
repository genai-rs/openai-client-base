/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct TemplateInputMessages {
    /// The type of input messages. Always `template`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
    #[serde(rename = "template")]
    pub template: Vec<models::TemplateInputMessagesTemplateInner>,
}

impl TemplateInputMessages {
    pub fn new(r#type: Type, template: Vec<models::TemplateInputMessagesTemplateInner>) -> TemplateInputMessages {
        TemplateInputMessages {
            r#type,
            template,
        }
    }
}
/// The type of input messages. Always `template`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "template")]
    Template,
}

impl Default for Type {
    fn default() -> Type {
        Self::Template
    }
}

