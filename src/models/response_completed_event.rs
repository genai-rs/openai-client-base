/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseCompletedEvent : Emitted when the model response is complete.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseCompletedEvent {
    /// The type of the event. Always `response.completed`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "response")]
    pub response: Box<models::Response>,
    /// The sequence number for this event.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
}

impl ResponseCompletedEvent {
    /// Emitted when the model response is complete.
    pub fn new(
        r#type: Type,
        response: models::Response,
        sequence_number: i32,
    ) -> ResponseCompletedEvent {
        ResponseCompletedEvent {
            r#type,
            response: Box::new(response),
            sequence_number,
        }
    }
}
/// The type of the event. Always `response.completed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.completed")]
    ResponseCompleted,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseCompleted
    }
}
