/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ExpiresAfterParam : Controls when the session expires relative to an anchor timestamp.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ExpiresAfterParam {
    /// Base timestamp used to calculate expiration. Currently fixed to `created_at`.
    #[serde(rename = "anchor")]
    pub anchor: Anchor,
    /// Number of seconds after the anchor when the session expires.
    #[serde(rename = "seconds")]
    pub seconds: i32,
}

impl ExpiresAfterParam {
    /// Controls when the session expires relative to an anchor timestamp.
    pub fn new(anchor: Anchor, seconds: i32) -> ExpiresAfterParam {
        ExpiresAfterParam {
            anchor,
            seconds,
        }
    }
}
/// Base timestamp used to calculate expiration. Currently fixed to `created_at`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Anchor {
    #[serde(rename = "created_at")]
    CreatedAt,
}

impl Default for Anchor {
    fn default() -> Anchor {
        Self::CreatedAt
    }
}



impl std::fmt::Display for ExpiresAfterParam {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
