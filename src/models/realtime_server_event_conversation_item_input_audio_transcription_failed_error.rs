/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventConversationItemInputAudioTranscriptionFailedError : Details of the transcription error.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeServerEventConversationItemInputAudioTranscriptionFailedError {
    /// The type of error.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Error code, if any.
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// A human-readable error message.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Parameter related to the error, if any.
    #[serde(rename = "param", skip_serializing_if = "Option::is_none")]
    pub param: Option<String>,
}

impl RealtimeServerEventConversationItemInputAudioTranscriptionFailedError {
    /// Details of the transcription error.
    pub fn new() -> RealtimeServerEventConversationItemInputAudioTranscriptionFailedError {
        RealtimeServerEventConversationItemInputAudioTranscriptionFailedError {
            r#type: None,
            code: None,
            message: None,
            param: None,
        }
    }
}



impl std::fmt::Display for RealtimeServerEventConversationItemInputAudioTranscriptionFailedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
