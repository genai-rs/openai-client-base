/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// HistoryParam : Controls how much historical context is retained for the session.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct HistoryParam {
    /// Enables chat users to access previous ChatKit threads. Defaults to true.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Number of recent ChatKit threads users have access to. Defaults to unlimited when unset.
    #[serde(rename = "recent_threads", skip_serializing_if = "Option::is_none")]
    pub recent_threads: Option<i32>,
}

impl HistoryParam {
    /// Controls how much historical context is retained for the session.
    pub fn new() -> HistoryParam {
        HistoryParam {
            enabled: None,
            recent_threads: None,
        }
    }
}

impl std::fmt::Display for HistoryParam {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
