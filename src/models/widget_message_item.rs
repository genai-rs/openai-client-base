/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WidgetMessageItem : Thread item that renders a widget payload.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct WidgetMessageItem {
    /// Identifier of the thread item.
    #[serde(rename = "id")]
    pub id: String,
    /// Type discriminator that is always `chatkit.thread_item`.
    #[serde(rename = "object")]
    pub object: Object,
    /// Unix timestamp (in seconds) for when the item was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// Identifier of the parent thread.
    #[serde(rename = "thread_id")]
    pub thread_id: String,
    /// Type discriminator that is always `chatkit.widget`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Serialized widget payload rendered in the UI.
    #[serde(rename = "widget")]
    pub widget: String,
}

impl WidgetMessageItem {
    /// Thread item that renders a widget payload.
    pub fn new(
        id: String,
        object: Object,
        created_at: i32,
        thread_id: String,
        r#type: Type,
        widget: String,
    ) -> WidgetMessageItem {
        WidgetMessageItem {
            id,
            object,
            created_at,
            thread_id,
            r#type,
            widget,
        }
    }
}
/// Type discriminator that is always `chatkit.thread_item`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "chatkit.thread_item")]
    ChatkitThreadItem,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChatkitThreadItem
    }
}
/// Type discriminator that is always `chatkit.widget`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "chatkit.widget")]
    ChatkitWidget,
}

impl Default for Type {
    fn default() -> Type {
        Self::ChatkitWidget
    }
}

impl std::fmt::Display for WidgetMessageItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
