/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CodeInterpreterToolContainer : The code interpreter container. Can be a container ID or an object that specifies uploaded file IDs to make available to your code.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CodeInterpreterToolContainer {
    /// Always `auto`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// An optional list of uploaded files to make available to your code.
    #[serde(rename = "file_ids", skip_serializing_if = "Option::is_none")]
    pub file_ids: Option<Vec<String>>,
}

impl CodeInterpreterToolContainer {
    /// The code interpreter container. Can be a container ID or an object that specifies uploaded file IDs to make available to your code.
    pub fn new(r#type: Type) -> CodeInterpreterToolContainer {
        CodeInterpreterToolContainer {
            r#type,
            file_ids: None,
        }
    }
}
/// Always `auto`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Type {
    fn default() -> Type {
        Self::Auto
    }
}
