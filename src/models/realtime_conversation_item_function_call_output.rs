/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeConversationItemFunctionCallOutput : A function call output item in a Realtime conversation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeConversationItemFunctionCallOutput {
    /// The unique ID of the item. This may be provided by the client or generated by the server.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifier for the API object being returned - always `realtime.item`. Optional when creating a new item.
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// The type of the item. Always `function_call_output`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The status of the item. Has no effect on the conversation.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The ID of the function call this output is for.
    #[serde(rename = "call_id")]
    pub call_id: String,
    /// The output of the function call, this is free text and can contain any information or simply be empty.
    #[serde(rename = "output")]
    pub output: String,
}

impl RealtimeConversationItemFunctionCallOutput {
    /// A function call output item in a Realtime conversation.
    pub fn new(
        r#type: Type,
        call_id: String,
        output: String,
    ) -> RealtimeConversationItemFunctionCallOutput {
        RealtimeConversationItemFunctionCallOutput {
            id: None,
            object: None,
            r#type,
            status: None,
            call_id,
            output,
        }
    }
}
/// Identifier for the API object being returned - always `realtime.item`. Optional when creating a new item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "realtime.item")]
    RealtimeItem,
}

impl Default for Object {
    fn default() -> Object {
        Self::RealtimeItem
    }
}
/// The type of the item. Always `function_call_output`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "function_call_output")]
    FunctionCallOutput,
}

impl Default for Type {
    fn default() -> Type {
        Self::FunctionCallOutput
    }
}
/// The status of the item. Has no effect on the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "incomplete")]
    Incomplete,
    #[serde(rename = "in_progress")]
    InProgress,
}

impl Default for Status {
    fn default() -> Status {
        Self::Completed
    }
}

impl std::fmt::Display for RealtimeConversationItemFunctionCallOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
