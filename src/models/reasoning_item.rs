/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReasoningItem : A description of the chain of thought used by a reasoning model while generating a response. Be sure to include these items in your `input` to the Responses API for subsequent turns of a conversation if you are manually  [managing context](https://platform.openai.com/docs/guides/conversation-state). 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ReasoningItem {
    /// The type of the object. Always `reasoning`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The unique identifier of the reasoning content. 
    #[serde(rename = "id")]
    pub id: String,
    /// The encrypted content of the reasoning item - populated when a response is generated with `reasoning.encrypted_content` in the `include` parameter. 
    #[serde(rename = "encrypted_content", skip_serializing_if = "Option::is_none")]
    pub encrypted_content: Option<String>,
    /// Reasoning summary content. 
    #[serde(rename = "summary")]
    pub summary: Vec<models::ReasoningItemSummaryInner>,
    /// Reasoning text content. 
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<models::ReasoningItemContentInner>>,
    /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. 
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl ReasoningItem {
    /// A description of the chain of thought used by a reasoning model while generating a response. Be sure to include these items in your `input` to the Responses API for subsequent turns of a conversation if you are manually  [managing context](https://platform.openai.com/docs/guides/conversation-state). 
    pub fn new(r#type: Type, id: String, summary: Vec<models::ReasoningItemSummaryInner>) -> ReasoningItem {
        ReasoningItem {
            r#type,
            id,
            encrypted_content: None,
            summary,
            content: None,
            status: None,
        }
    }
}
/// The type of the object. Always `reasoning`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "reasoning")]
    Reasoning,
}

impl Default for Type {
    fn default() -> Type {
        Self::Reasoning
    }
}
/// The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "incomplete")]
    Incomplete,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}

