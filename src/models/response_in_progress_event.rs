/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseInProgressEvent : Emitted when the response is in progress.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseInProgressEvent {
    /// The type of the event. Always `response.in_progress`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "response")]
    pub response: Box<models::Response>,
    /// The sequence number of this event.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
}

impl ResponseInProgressEvent {
    /// Emitted when the response is in progress.
    pub fn new(
        r#type: Type,
        response: models::Response,
        sequence_number: i32,
    ) -> ResponseInProgressEvent {
        ResponseInProgressEvent {
            r#type,
            response: Box::new(response),
            sequence_number,
        }
    }
}
/// The type of the event. Always `response.in_progress`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.in_progress")]
    ResponseInProgress,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseInProgress
    }
}

impl std::fmt::Display for ResponseInProgressEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
