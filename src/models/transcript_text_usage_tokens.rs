/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TranscriptTextUsageTokens : Usage statistics for models billed by token usage.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct TranscriptTextUsageTokens {
    /// The type of the usage object. Always `tokens` for this variant.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Number of input tokens billed for this request.
    #[serde(rename = "input_tokens")]
    pub input_tokens: i32,
    #[serde(rename = "input_token_details", skip_serializing_if = "Option::is_none")]
    pub input_token_details: Option<Box<models::TranscriptTextUsageTokensInputTokenDetails>>,
    /// Number of output tokens generated.
    #[serde(rename = "output_tokens")]
    pub output_tokens: i32,
    /// Total number of tokens used (input + output).
    #[serde(rename = "total_tokens")]
    pub total_tokens: i32,
}

impl TranscriptTextUsageTokens {
    /// Usage statistics for models billed by token usage.
    pub fn new(r#type: Type, input_tokens: i32, output_tokens: i32, total_tokens: i32) -> TranscriptTextUsageTokens {
        TranscriptTextUsageTokens {
            r#type,
            input_tokens,
            input_token_details: None,
            output_tokens,
            total_tokens,
        }
    }
}
/// The type of the usage object. Always `tokens` for this variant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "tokens")]
    Tokens,
}

impl Default for Type {
    fn default() -> Type {
        Self::Tokens
    }
}



impl std::fmt::Display for TranscriptTextUsageTokens {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
