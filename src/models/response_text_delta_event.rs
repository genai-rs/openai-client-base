/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseTextDeltaEvent : Emitted when there is an additional text delta.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseTextDeltaEvent {
    /// The type of the event. Always `response.output_text.delta`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the output item that the text delta was added to. 
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the output item that the text delta was added to. 
    #[serde(rename = "output_index")]
    pub output_index: i32,
    /// The index of the content part that the text delta was added to. 
    #[serde(rename = "content_index")]
    pub content_index: i32,
    /// The text delta that was added. 
    #[serde(rename = "delta")]
    pub delta: String,
    /// The sequence number for this event.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
    /// The log probabilities of the tokens in the delta. 
    #[serde(rename = "logprobs")]
    pub logprobs: Vec<models::ResponseLogProb>,
}

impl ResponseTextDeltaEvent {
    /// Emitted when there is an additional text delta.
    pub fn new(r#type: Type, item_id: String, output_index: i32, content_index: i32, delta: String, sequence_number: i32, logprobs: Vec<models::ResponseLogProb>) -> ResponseTextDeltaEvent {
        ResponseTextDeltaEvent {
            r#type,
            item_id,
            output_index,
            content_index,
            delta,
            sequence_number,
            logprobs,
        }
    }
}
/// The type of the event. Always `response.output_text.delta`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.output_text.delta")]
    ResponseOutputTextDelta,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseOutputTextDelta
    }
}

