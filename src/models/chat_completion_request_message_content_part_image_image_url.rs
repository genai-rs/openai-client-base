/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionRequestMessageContentPartImageImageUrl {
    /// Either a URL of the image or the base64 encoded image data.
    #[serde(rename = "url")]
    pub url: String,
    /// Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<Detail>,
}

impl ChatCompletionRequestMessageContentPartImageImageUrl {
    pub fn new(url: String) -> ChatCompletionRequestMessageContentPartImageImageUrl {
        ChatCompletionRequestMessageContentPartImageImageUrl { url, detail: None }
    }
}
/// Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Detail {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "high")]
    High,
}

impl Default for Detail {
    fn default() -> Detail {
        Self::Auto
    }
}

impl std::fmt::Display for ChatCompletionRequestMessageContentPartImageImageUrl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
