/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Click : A click action. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct Click {
    /// Specifies the event type. For a click action, this property is  always set to `click`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`. 
    #[serde(rename = "button")]
    pub button: Button,
    /// The x-coordinate where the click occurred. 
    #[serde(rename = "x")]
    pub x: i32,
    /// The y-coordinate where the click occurred. 
    #[serde(rename = "y")]
    pub y: i32,
}

impl Click {
    /// A click action. 
    pub fn new(r#type: Type, button: Button, x: i32, y: i32) -> Click {
        Click {
            r#type,
            button,
            x,
            y,
        }
    }
}
/// Specifies the event type. For a click action, this property is  always set to `click`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "click")]
    Click,
}

impl Default for Type {
    fn default() -> Type {
        Self::Click
    }
}
/// Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Button {
    #[serde(rename = "left")]
    Left,
    #[serde(rename = "right")]
    Right,
    #[serde(rename = "wheel")]
    Wheel,
    #[serde(rename = "back")]
    Back,
    #[serde(rename = "forward")]
    Forward,
}

impl Default for Button {
    fn default() -> Button {
        Self::Left
    }
}



impl std::fmt::Display for Click {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
