/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateEvalResponsesRunDataSourceSamplingParams {
    #[serde(rename = "reasoning_effort", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reasoning_effort: Option<Option<models::ReasoningEffort>>,
    /// A higher temperature increases randomness in the outputs.
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// The maximum number of tokens in the generated output.
    #[serde(rename = "max_completion_tokens", skip_serializing_if = "Option::is_none")]
    pub max_completion_tokens: Option<i32>,
    /// An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
    #[serde(rename = "top_p", skip_serializing_if = "Option::is_none")]
    pub top_p: Option<f64>,
    /// A seed value to initialize the randomness, during sampling.
    #[serde(rename = "seed", skip_serializing_if = "Option::is_none")]
    pub seed: Option<i32>,
    /// An array of tools the model may call while generating a response. You can specify which tool to use by setting the `tool_choice` parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)   or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about   [built-in tools](https://platform.openai.com/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code. Learn more about   [function calling](https://platform.openai.com/docs/guides/function-calling). 
    #[serde(rename = "tools", skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<models::Tool>>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<Box<models::CreateEvalResponsesRunDataSourceSamplingParamsText>>,
}

impl CreateEvalResponsesRunDataSourceSamplingParams {
    pub fn new() -> CreateEvalResponsesRunDataSourceSamplingParams {
        CreateEvalResponsesRunDataSourceSamplingParams {
            reasoning_effort: None,
            temperature: None,
            max_completion_tokens: None,
            top_p: None,
            seed: None,
            tools: None,
            text: None,
        }
    }
}



impl std::fmt::Display for CreateEvalResponsesRunDataSourceSamplingParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
