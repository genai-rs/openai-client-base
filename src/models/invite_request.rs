/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InviteRequest {
    /// Send an email to this address
    #[serde(rename = "email")]
    pub email: String,
    /// `owner` or `reader`
    #[serde(rename = "role")]
    pub role: Role,
    /// An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
    #[serde(rename = "projects", skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<models::InviteRequestProjectsInner>>,
}

impl InviteRequest {
    pub fn new(email: String, role: Role) -> InviteRequest {
        InviteRequest {
            email,
            role,
            projects: None,
        }
    }
}
/// `owner` or `reader`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "reader")]
    Reader,
    #[serde(rename = "owner")]
    Owner,
}

impl Default for Role {
    fn default() -> Role {
        Self::Reader
    }
}
