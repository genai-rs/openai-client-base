/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseAllOfIncompleteDetails : Details about why the response is incomplete.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseAllOfIncompleteDetails {
    /// The reason why the response is incomplete.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
}

impl ResponseAllOfIncompleteDetails {
    /// Details about why the response is incomplete.
    pub fn new() -> ResponseAllOfIncompleteDetails {
        ResponseAllOfIncompleteDetails { reason: None }
    }
}
/// The reason why the response is incomplete.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "max_output_tokens")]
    MaxOutputTokens,
    #[serde(rename = "content_filter")]
    ContentFilter,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::MaxOutputTokens
    }
}

impl std::fmt::Display for ResponseAllOfIncompleteDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
