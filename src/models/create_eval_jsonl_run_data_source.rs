/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateEvalJsonlRunDataSource : A JsonlRunDataSource object with that specifies a JSONL file that matches the eval  
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateEvalJsonlRunDataSource {
    /// The type of data source. Always `jsonl`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "source")]
    pub source: Box<models::CreateEvalJsonlRunDataSourceSource>,
}

impl CreateEvalJsonlRunDataSource {
    /// A JsonlRunDataSource object with that specifies a JSONL file that matches the eval  
    pub fn new(r#type: Type, source: models::CreateEvalJsonlRunDataSourceSource) -> CreateEvalJsonlRunDataSource {
        CreateEvalJsonlRunDataSource {
            r#type,
            source: Box::new(source),
        }
    }
}
/// The type of data source. Always `jsonl`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "jsonl")]
    Jsonl,
}

impl Default for Type {
    fn default() -> Type {
        Self::Jsonl
    }
}



impl std::fmt::Display for CreateEvalJsonlRunDataSource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
