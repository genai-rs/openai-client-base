/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInner {
    /// A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store. 
    #[serde(rename = "file_ids", skip_serializing_if = "Option::is_none")]
    pub file_ids: Option<Vec<String>>,
    #[serde(rename = "chunking_strategy", skip_serializing_if = "Option::is_none")]
    pub chunking_strategy: Option<Box<models::CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInnerChunkingStrategy>>,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.  Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, String>>>,
}

impl CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInner {
    pub fn new() -> CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInner {
        CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInner {
            file_ids: None,
            chunking_strategy: None,
            metadata: None,
        }
    }
}

impl std::fmt::Display for CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInner {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
