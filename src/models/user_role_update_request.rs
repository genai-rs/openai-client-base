/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct UserRoleUpdateRequest {
    /// `owner` or `reader`
    #[serde(rename = "role")]
    pub role: Role,
}

impl UserRoleUpdateRequest {
    pub fn new(role: Role) -> UserRoleUpdateRequest {
        UserRoleUpdateRequest { role }
    }
}
/// `owner` or `reader`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "reader")]
    Reader,
}

impl Default for Role {
    fn default() -> Role {
        Self::Owner
    }
}

impl std::fmt::Display for UserRoleUpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
