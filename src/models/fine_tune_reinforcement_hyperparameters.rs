/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FineTuneReinforcementHyperparameters : The hyperparameters used for the reinforcement fine-tuning job.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FineTuneReinforcementHyperparameters {
    #[serde(rename = "batch_size", skip_serializing_if = "Option::is_none")]
    pub batch_size: Option<Box<models::FineTuneDpoHyperparametersBatchSize>>,
    #[serde(rename = "learning_rate_multiplier", skip_serializing_if = "Option::is_none")]
    pub learning_rate_multiplier: Option<Box<models::FineTuneDpoHyperparametersLearningRateMultiplier>>,
    #[serde(rename = "n_epochs", skip_serializing_if = "Option::is_none")]
    pub n_epochs: Option<Box<models::FineTuneDpoHyperparametersNEpochs>>,
    /// Level of reasoning effort. 
    #[serde(rename = "reasoning_effort", skip_serializing_if = "Option::is_none")]
    pub reasoning_effort: Option<ReasoningEffort>,
    #[serde(rename = "compute_multiplier", skip_serializing_if = "Option::is_none")]
    pub compute_multiplier: Option<Box<models::FineTuneReinforcementHyperparametersComputeMultiplier>>,
    #[serde(rename = "eval_interval", skip_serializing_if = "Option::is_none")]
    pub eval_interval: Option<Box<models::FineTuneReinforcementHyperparametersEvalInterval>>,
    #[serde(rename = "eval_samples", skip_serializing_if = "Option::is_none")]
    pub eval_samples: Option<Box<models::FineTuneReinforcementHyperparametersEvalSamples>>,
}

impl FineTuneReinforcementHyperparameters {
    /// The hyperparameters used for the reinforcement fine-tuning job.
    pub fn new() -> FineTuneReinforcementHyperparameters {
        FineTuneReinforcementHyperparameters {
            batch_size: None,
            learning_rate_multiplier: None,
            n_epochs: None,
            reasoning_effort: None,
            compute_multiplier: None,
            eval_interval: None,
            eval_samples: None,
        }
    }
}
/// Level of reasoning effort. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReasoningEffort {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
}

impl Default for ReasoningEffort {
    fn default() -> ReasoningEffort {
        Self::Default
    }
}



impl std::fmt::Display for FineTuneReinforcementHyperparameters {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
