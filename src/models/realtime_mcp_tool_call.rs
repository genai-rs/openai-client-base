/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeMcpToolCall : A Realtime item representing an invocation of a tool on an MCP server. 
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeMcpToolCall {
    /// The type of the item. Always `mcp_tool_call`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The unique ID of the tool call.
    #[serde(rename = "id")]
    pub id: String,
    /// The label of the MCP server running the tool.
    #[serde(rename = "server_label")]
    pub server_label: String,
    /// The name of the tool that was run.
    #[serde(rename = "name")]
    pub name: String,
    /// A JSON string of the arguments passed to the tool.
    #[serde(rename = "arguments")]
    pub arguments: String,
    /// The ID of an associated approval request, if any.
    #[serde(rename = "approval_request_id", skip_serializing_if = "Option::is_none")]
    pub approval_request_id: Option<String>,
    /// The output from the tool call.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Box<models::RealtimeMcpToolCallError>>,
}

impl RealtimeMcpToolCall {
    /// A Realtime item representing an invocation of a tool on an MCP server. 
    pub fn new(r#type: Type, id: String, server_label: String, name: String, arguments: String) -> RealtimeMcpToolCall {
        RealtimeMcpToolCall {
            r#type,
            id,
            server_label,
            name,
            arguments,
            approval_request_id: None,
            output: None,
            error: None,
        }
    }
}
/// The type of the item. Always `mcp_tool_call`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "mcp_tool_call")]
    McpToolCall,
}

impl Default for Type {
    fn default() -> Type {
        Self::McpToolCall
    }
}

