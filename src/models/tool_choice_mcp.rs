/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ToolChoiceMcp : Use this option to force the model to call a specific tool on a remote MCP server.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ToolChoiceMcp {
    /// For MCP tools, the type is always `mcp`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The label of the MCP server to use.
    #[serde(rename = "server_label")]
    pub server_label: String,
    /// The name of the tool to call on the server.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl ToolChoiceMcp {
    /// Use this option to force the model to call a specific tool on a remote MCP server.
    pub fn new(r#type: Type, server_label: String) -> ToolChoiceMcp {
        ToolChoiceMcp {
            r#type,
            server_label,
            name: None,
        }
    }
}
/// For MCP tools, the type is always `mcp`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "mcp")]
    Mcp,
}

impl Default for Type {
    fn default() -> Type {
        Self::Mcp
    }
}
