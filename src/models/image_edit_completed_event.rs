/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ImageEditCompletedEvent : Emitted when image editing has completed and the final image is available.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ImageEditCompletedEvent {
    /// The type of the event. Always `image_edit.completed`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Base64-encoded final edited image data, suitable for rendering as an image.
    #[serde(rename = "b64_json")]
    pub b64_json: String,
    /// The Unix timestamp when the event was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The size of the edited image.
    #[serde(rename = "size")]
    pub size: Size,
    /// The quality setting for the edited image.
    #[serde(rename = "quality")]
    pub quality: Quality,
    /// The background setting for the edited image.
    #[serde(rename = "background")]
    pub background: Background,
    /// The output format for the edited image.
    #[serde(rename = "output_format")]
    pub output_format: OutputFormat,
    #[serde(rename = "usage")]
    pub usage: Box<models::ImagesUsage>,
}

impl ImageEditCompletedEvent {
    /// Emitted when image editing has completed and the final image is available.
    pub fn new(
        r#type: Type,
        b64_json: String,
        created_at: i32,
        size: Size,
        quality: Quality,
        background: Background,
        output_format: OutputFormat,
        usage: models::ImagesUsage,
    ) -> ImageEditCompletedEvent {
        ImageEditCompletedEvent {
            r#type,
            b64_json,
            created_at,
            size,
            quality,
            background,
            output_format,
            usage: Box::new(usage),
        }
    }
}
/// The type of the event. Always `image_edit.completed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "image_edit.completed")]
    ImageEditCompleted,
}

impl Default for Type {
    fn default() -> Type {
        Self::ImageEditCompleted
    }
}
/// The size of the edited image.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Size {
    #[serde(rename = "1024x1024")]
    Variant1024x1024,
    #[serde(rename = "1024x1536")]
    Variant1024x1536,
    #[serde(rename = "1536x1024")]
    Variant1536x1024,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Size {
    fn default() -> Size {
        Self::Variant1024x1024
    }
}
/// The quality setting for the edited image.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Quality {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Quality {
    fn default() -> Quality {
        Self::Low
    }
}
/// The background setting for the edited image.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Background {
    #[serde(rename = "transparent")]
    Transparent,
    #[serde(rename = "opaque")]
    Opaque,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Background {
    fn default() -> Background {
        Self::Transparent
    }
}
/// The output format for the edited image.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutputFormat {
    #[serde(rename = "png")]
    Png,
    #[serde(rename = "webp")]
    Webp,
    #[serde(rename = "jpeg")]
    Jpeg,
}

impl Default for OutputFormat {
    fn default() -> OutputFormat {
        Self::Png
    }
}
