/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventConversationItemDeleted : Returned when an item in the conversation is deleted by the client with a  `conversation.item.delete` event. This event is used to synchronize the  server's understanding of the conversation history with the client's view. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventConversationItemDeleted {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    /// The ID of the item that was deleted.
    #[serde(rename = "item_id")]
    pub item_id: String,
}

impl RealtimeBetaServerEventConversationItemDeleted {
    /// Returned when an item in the conversation is deleted by the client with a  `conversation.item.delete` event. This event is used to synchronize the  server's understanding of the conversation history with the client's view. 
    pub fn new(event_id: String, r#type: Option<serde_json::Value>, item_id: String) -> RealtimeBetaServerEventConversationItemDeleted {
        RealtimeBetaServerEventConversationItemDeleted {
            event_id,
            r#type,
            item_id,
        }
    }
}

