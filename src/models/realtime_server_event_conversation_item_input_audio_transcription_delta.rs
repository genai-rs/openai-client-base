/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventConversationItemInputAudioTranscriptionDelta : Returned when the text value of an input audio transcription content part is updated with incremental transcription results. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeServerEventConversationItemInputAudioTranscriptionDelta {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    /// The ID of the item containing the audio that is being transcribed.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the content part in the item's content array.
    #[serde(rename = "content_index", skip_serializing_if = "Option::is_none")]
    pub content_index: Option<i32>,
    /// The text delta.
    #[serde(rename = "delta", skip_serializing_if = "Option::is_none")]
    pub delta: Option<String>,
    /// The log probabilities of the transcription. These can be enabled by configurating the session with `\"include\": [\"item.input_audio_transcription.logprobs\"]`. Each entry in the array corresponds a log probability of which token would be selected for this chunk of transcription. This can help to identify if it was possible there were multiple valid options for a given chunk of transcription.
    #[serde(rename = "logprobs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub logprobs: Option<Option<Vec<models::LogProbProperties>>>,
}

impl RealtimeServerEventConversationItemInputAudioTranscriptionDelta {
    /// Returned when the text value of an input audio transcription content part is updated with incremental transcription results. 
    pub fn new(event_id: String, r#type: Option<serde_json::Value>, item_id: String) -> RealtimeServerEventConversationItemInputAudioTranscriptionDelta {
        RealtimeServerEventConversationItemInputAudioTranscriptionDelta {
            event_id,
            r#type,
            item_id,
            content_index: None,
            delta: None,
            logprobs: None,
        }
    }
}



impl std::fmt::Display for RealtimeServerEventConversationItemInputAudioTranscriptionDelta {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
