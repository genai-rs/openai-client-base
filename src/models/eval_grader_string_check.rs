/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct EvalGraderStringCheck {
    /// The object type, which is always `string_check`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the grader.
    #[serde(rename = "name")]
    pub name: String,
    /// The input text. This may include template strings.
    #[serde(rename = "input")]
    pub input: String,
    /// The reference text. This may include template strings.
    #[serde(rename = "reference")]
    pub reference: String,
    /// The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
    #[serde(rename = "operation")]
    pub operation: Operation,
}

impl EvalGraderStringCheck {
    pub fn new(r#type: Type, name: String, input: String, reference: String, operation: Operation) -> EvalGraderStringCheck {
        EvalGraderStringCheck {
            r#type,
            name,
            input,
            reference,
            operation,
        }
    }
}
/// The object type, which is always `string_check`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "string_check")]
    StringCheck,
}

impl Default for Type {
    fn default() -> Type {
        Self::StringCheck
    }
}
/// The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operation {
    #[serde(rename = "eq")]
    Eq,
    #[serde(rename = "ne")]
    Ne,
    #[serde(rename = "like")]
    Like,
    #[serde(rename = "ilike")]
    Ilike,
}

impl Default for Operation {
    fn default() -> Operation {
        Self::Eq
    }
}



impl std::fmt::Display for EvalGraderStringCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
