/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionMessageListDataInnerAllOfContentPartsInner {
    /// The type of the content part.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The text content.
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "image_url")]
    pub image_url: Box<models::ChatCompletionRequestMessageContentPartImageImageUrl>,
}

impl ChatCompletionMessageListDataInnerAllOfContentPartsInner {
    pub fn new(r#type: Type, text: String, image_url: models::ChatCompletionRequestMessageContentPartImageImageUrl) -> ChatCompletionMessageListDataInnerAllOfContentPartsInner {
        ChatCompletionMessageListDataInnerAllOfContentPartsInner {
            r#type,
            text,
            image_url: Box::new(image_url),
        }
    }
}
/// The type of the content part.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image_url")]
    ImageUrl,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}



impl std::fmt::Display for ChatCompletionMessageListDataInnerAllOfContentPartsInner {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
