/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventResponseCreated : Returned when a new Response is created. The first event of response creation, where the response is in an initial state of `in_progress`. 
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeServerEventResponseCreated {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    #[serde(rename = "response")]
    pub response: Box<models::RealtimeResponse>,
}

impl RealtimeServerEventResponseCreated {
    /// Returned when a new Response is created. The first event of response creation, where the response is in an initial state of `in_progress`. 
    pub fn new(event_id: String, r#type: Option<serde_json::Value>, response: models::RealtimeResponse) -> RealtimeServerEventResponseCreated {
        RealtimeServerEventResponseCreated {
            event_id,
            r#type,
            response: Box::new(response),
        }
    }
}



impl std::fmt::Display for RealtimeServerEventResponseCreated {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
