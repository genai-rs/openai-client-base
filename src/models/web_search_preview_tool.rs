/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebSearchPreviewTool : This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct WebSearchPreviewTool {
    /// The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "user_location", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_location: Option<Option<Box<models::ApproximateLocation>>>,
    #[serde(rename = "search_context_size", skip_serializing_if = "Option::is_none")]
    pub search_context_size: Option<models::SearchContextSize>,
}

impl WebSearchPreviewTool {
    /// This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
    pub fn new(r#type: Type) -> WebSearchPreviewTool {
        WebSearchPreviewTool {
            r#type,
            user_location: None,
            search_context_size: None,
        }
    }
}
/// The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "web_search_preview")]
    WebSearchPreview,
    #[serde(rename = "web_search_preview_2025_03_11")]
    WebSearchPreview20250311,
}

impl Default for Type {
    fn default() -> Type {
        Self::WebSearchPreview
    }
}



impl std::fmt::Display for WebSearchPreviewTool {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
