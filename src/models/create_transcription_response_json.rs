/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateTranscriptionResponseJson : Represents a transcription response returned by model, based on the provided input.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateTranscriptionResponseJson {
    /// The transcribed text.
    #[serde(rename = "text")]
    pub text: String,
    /// The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
    #[serde(rename = "logprobs", skip_serializing_if = "Option::is_none")]
    pub logprobs: Option<Vec<models::CreateTranscriptionResponseJsonLogprobsInner>>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<Box<models::CreateTranscriptionResponseJsonUsage>>,
}

impl CreateTranscriptionResponseJson {
    /// Represents a transcription response returned by model, based on the provided input.
    pub fn new(text: String) -> CreateTranscriptionResponseJson {
        CreateTranscriptionResponseJson {
            text,
            logprobs: None,
            usage: None,
        }
    }
}

impl std::fmt::Display for CreateTranscriptionResponseJson {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
