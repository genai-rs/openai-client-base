/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EvalLogsDataSourceConfig : A LogsDataSourceConfig which specifies the metadata property of your logs query. This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The schema returned by this data source config is used to defined what variables are available in your evals. `item` and `sample` are both defined when using this data source config. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct EvalLogsDataSourceConfig {
    /// The type of data source. Always `logs`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    /// The json schema for the run data source items. Learn how to build JSON schemas [here](https://json-schema.org/). 
    #[serde(rename = "schema")]
    pub schema: std::collections::HashMap<String, serde_json::Value>,
}

impl EvalLogsDataSourceConfig {
    /// A LogsDataSourceConfig which specifies the metadata property of your logs query. This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The schema returned by this data source config is used to defined what variables are available in your evals. `item` and `sample` are both defined when using this data source config. 
    pub fn new(r#type: Type, schema: std::collections::HashMap<String, serde_json::Value>) -> EvalLogsDataSourceConfig {
        EvalLogsDataSourceConfig {
            r#type,
            metadata: None,
            schema,
        }
    }
}
/// The type of data source. Always `logs`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "logs")]
    Logs,
}

impl Default for Type {
    fn default() -> Type {
        Self::Logs
    }
}

