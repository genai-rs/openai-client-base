/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CustomTool : A custom tool that processes input using a specified format. Learn more about [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools). 
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CustomTool {
    /// The type of the custom tool. Always `custom`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the custom tool, used to identify it in tool calls.
    #[serde(rename = "name")]
    pub name: String,
    /// Optional description of the custom tool, used to provide more context. 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Box<models::CustomToolFormat>>,
}

impl CustomTool {
    /// A custom tool that processes input using a specified format. Learn more about [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools). 
    pub fn new(r#type: Type, name: String) -> CustomTool {
        CustomTool {
            r#type,
            name,
            description: None,
            format: None,
        }
    }
}
/// The type of the custom tool. Always `custom`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Type {
    fn default() -> Type {
        Self::Custom
    }
}

