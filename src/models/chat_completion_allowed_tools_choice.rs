/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatCompletionAllowedToolsChoice : Constrains the tools available to the model to a pre-defined set.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionAllowedToolsChoice {
    /// Allowed tool configuration type. Always `allowed_tools`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "allowed_tools")]
    pub allowed_tools: Box<models::ChatCompletionAllowedTools>,
}

impl ChatCompletionAllowedToolsChoice {
    /// Constrains the tools available to the model to a pre-defined set.
    pub fn new(
        r#type: Type,
        allowed_tools: models::ChatCompletionAllowedTools,
    ) -> ChatCompletionAllowedToolsChoice {
        ChatCompletionAllowedToolsChoice {
            r#type,
            allowed_tools: Box::new(allowed_tools),
        }
    }
}
/// Allowed tool configuration type. Always `allowed_tools`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "allowed_tools")]
    AllowedTools,
}

impl Default for Type {
    fn default() -> Type {
        Self::AllowedTools
    }
}

impl std::fmt::Display for ChatCompletionAllowedToolsChoice {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
