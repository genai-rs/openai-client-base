/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TranscriptTextSegmentEvent : Emitted when a diarized transcription returns a completed segment with speaker information. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with `stream` set to `true` and `response_format` set to `diarized_json`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct TranscriptTextSegmentEvent {
    /// The type of the event. Always `transcript.text.segment`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Unique identifier for the segment.
    #[serde(rename = "id")]
    pub id: String,
    /// Start timestamp of the segment in seconds.
    #[serde(rename = "start")]
    pub start: f32,
    /// End timestamp of the segment in seconds.
    #[serde(rename = "end")]
    pub end: f32,
    /// Transcript text for this segment.
    #[serde(rename = "text")]
    pub text: String,
    /// Speaker label for this segment.
    #[serde(rename = "speaker")]
    pub speaker: String,
}

impl TranscriptTextSegmentEvent {
    /// Emitted when a diarized transcription returns a completed segment with speaker information. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with `stream` set to `true` and `response_format` set to `diarized_json`.
    pub fn new(
        r#type: Type,
        id: String,
        start: f32,
        end: f32,
        text: String,
        speaker: String,
    ) -> TranscriptTextSegmentEvent {
        TranscriptTextSegmentEvent {
            r#type,
            id,
            start,
            end,
            text,
            speaker,
        }
    }
}
/// The type of the event. Always `transcript.text.segment`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "transcript.text.segment")]
    TranscriptTextSegment,
}

impl Default for Type {
    fn default() -> Type {
        Self::TranscriptTextSegment
    }
}

impl std::fmt::Display for TranscriptTextSegmentEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
