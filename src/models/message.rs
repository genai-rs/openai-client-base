/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Message : A message to or from the model.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct Message {
    /// The type of the message. Always set to `message`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The unique ID of the message.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "status")]
    pub status: models::MessageStatus,
    #[serde(rename = "role")]
    pub role: models::MessageRole,
    /// The content of the message
    #[serde(rename = "content")]
    pub content: Vec<models::MessageContentInner>,
}

impl Message {
    /// A message to or from the model.
    pub fn new(r#type: Type, id: String, status: models::MessageStatus, role: models::MessageRole, content: Vec<models::MessageContentInner>) -> Message {
        Message {
            r#type,
            id,
            status,
            role,
            content,
        }
    }
}
/// The type of the message. Always set to `message`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "message")]
    Message,
}

impl Default for Type {
    fn default() -> Type {
        Self::Message
    }
}



impl std::fmt::Display for Message {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
