/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CompletionUsage : Usage statistics for the completion request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CompletionUsage {
    /// Number of tokens in the generated completion.
    #[serde(rename = "completion_tokens")]
    pub completion_tokens: i32,
    /// Number of tokens in the prompt.
    #[serde(rename = "prompt_tokens")]
    pub prompt_tokens: i32,
    /// Total number of tokens used in the request (prompt + completion).
    #[serde(rename = "total_tokens")]
    pub total_tokens: i32,
    #[serde(
        rename = "completion_tokens_details",
        skip_serializing_if = "Option::is_none"
    )]
    pub completion_tokens_details: Option<Box<models::CompletionUsageCompletionTokensDetails>>,
    #[serde(
        rename = "prompt_tokens_details",
        skip_serializing_if = "Option::is_none"
    )]
    pub prompt_tokens_details: Option<Box<models::CompletionUsagePromptTokensDetails>>,
}

impl CompletionUsage {
    /// Usage statistics for the completion request.
    pub fn new(completion_tokens: i32, prompt_tokens: i32, total_tokens: i32) -> CompletionUsage {
        CompletionUsage {
            completion_tokens,
            prompt_tokens,
            total_tokens,
            completion_tokens_details: None,
            prompt_tokens_details: None,
        }
    }
}

impl std::fmt::Display for CompletionUsage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
