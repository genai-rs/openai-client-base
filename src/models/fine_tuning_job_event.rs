/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FineTuningJobEvent : Fine-tuning job event object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FineTuningJobEvent {
    /// The object type, which is always \"fine_tuning.job.event\".
    #[serde(rename = "object")]
    pub object: Object,
    /// The object identifier.
    #[serde(rename = "id")]
    pub id: String,
    /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The log level of the event.
    #[serde(rename = "level")]
    pub level: Level,
    /// The message of the event.
    #[serde(rename = "message")]
    pub message: String,
    /// The type of event.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The data associated with the event.
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
}

impl FineTuningJobEvent {
    /// Fine-tuning job event object
    pub fn new(
        object: Object,
        id: String,
        created_at: i32,
        level: Level,
        message: String,
    ) -> FineTuningJobEvent {
        FineTuningJobEvent {
            object,
            id,
            created_at,
            level,
            message,
            r#type: None,
            data: None,
        }
    }
}
/// The object type, which is always \"fine_tuning.job.event\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "fine_tuning.job.event")]
    FineTuningJobEvent,
}

impl Default for Object {
    fn default() -> Object {
        Self::FineTuningJobEvent
    }
}
/// The log level of the event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

impl Default for Level {
    fn default() -> Level {
        Self::Info
    }
}
/// The type of event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "message")]
    Message,
    #[serde(rename = "metrics")]
    Metrics,
}

impl Default for Type {
    fn default() -> Type {
        Self::Message
    }
}
