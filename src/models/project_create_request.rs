/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ProjectCreateRequest {
    /// The friendly name of the project, this name appears in reports.
    #[serde(rename = "name")]
    pub name: String,
    /// Create the project with the specified data residency region. Your organization must have access to Data residency functionality in order to use. See [data residency controls](https://platform.openai.com/docs/guides/your-data#data-residency-controls) to review the functionality and limitations of setting this field.
    #[serde(rename = "geography", skip_serializing_if = "Option::is_none")]
    pub geography: Option<Geography>,
}

impl ProjectCreateRequest {
    pub fn new(name: String) -> ProjectCreateRequest {
        ProjectCreateRequest {
            name,
            geography: None,
        }
    }
}
/// Create the project with the specified data residency region. Your organization must have access to Data residency functionality in order to use. See [data residency controls](https://platform.openai.com/docs/guides/your-data#data-residency-controls) to review the functionality and limitations of setting this field.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Geography {
    #[serde(rename = "US")]
    Us,
    #[serde(rename = "EU")]
    Eu,
    #[serde(rename = "JP")]
    Jp,
    #[serde(rename = "IN")]
    In,
    #[serde(rename = "KR")]
    Kr,
    #[serde(rename = "CA")]
    Ca,
    #[serde(rename = "AU")]
    Au,
    #[serde(rename = "SG")]
    Sg,
}

impl Default for Geography {
    fn default() -> Geography {
        Self::Us
    }
}

impl std::fmt::Display for ProjectCreateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
