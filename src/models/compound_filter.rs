/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CompoundFilter : Combine multiple filters using `and` or `or`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CompoundFilter {
    /// Type of operation: `and` or `or`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.
    #[serde(rename = "filters")]
    pub filters: Vec<models::ComparisonFilter>,
}

impl CompoundFilter {
    /// Combine multiple filters using `and` or `or`.
    pub fn new(r#type: Type, filters: Vec<models::ComparisonFilter>) -> CompoundFilter {
        CompoundFilter {
            r#type,
            filters,
        }
    }
}
/// Type of operation: `and` or `or`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "and")]
    And,
    #[serde(rename = "or")]
    Or,
}

impl Default for Type {
    fn default() -> Type {
        Self::And
    }
}



impl std::fmt::Display for CompoundFilter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
