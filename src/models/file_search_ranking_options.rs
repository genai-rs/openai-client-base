/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FileSearchRankingOptions : The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.  See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FileSearchRankingOptions {
    #[serde(rename = "ranker", skip_serializing_if = "Option::is_none")]
    pub ranker: Option<models::FileSearchRanker>,
    /// The score threshold for the file search. All values must be a floating point number between 0 and 1.
    #[serde(rename = "score_threshold")]
    pub score_threshold: f64,
}

impl FileSearchRankingOptions {
    /// The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.  See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    pub fn new(score_threshold: f64) -> FileSearchRankingOptions {
        FileSearchRankingOptions {
            ranker: None,
            score_threshold,
        }
    }
}



impl std::fmt::Display for FileSearchRankingOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
