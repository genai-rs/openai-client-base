/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// KeyPress : A collection of keypresses the model would like to perform. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct KeyPress {
    /// Specifies the event type. For a keypress action, this property is  always set to `keypress`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key. 
    #[serde(rename = "keys")]
    pub keys: Vec<String>,
}

impl KeyPress {
    /// A collection of keypresses the model would like to perform. 
    pub fn new(r#type: Type, keys: Vec<String>) -> KeyPress {
        KeyPress {
            r#type,
            keys,
        }
    }
}
/// Specifies the event type. For a keypress action, this property is  always set to `keypress`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "keypress")]
    Keypress,
}

impl Default for Type {
    fn default() -> Type {
        Self::Keypress
    }
}



impl std::fmt::Display for KeyPress {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
