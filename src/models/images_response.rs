/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ImagesResponse : The response from the image generation endpoint.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ImagesResponse {
    /// The Unix timestamp (in seconds) of when the image was created.
    #[serde(rename = "created")]
    pub created: i32,
    /// The list of generated images.
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<models::Image>>,
    /// The background parameter used for the image generation. Either `transparent` or `opaque`.
    #[serde(rename = "background", skip_serializing_if = "Option::is_none")]
    pub background: Option<Background>,
    /// The output format of the image generation. Either `png`, `webp`, or `jpeg`.
    #[serde(rename = "output_format", skip_serializing_if = "Option::is_none")]
    pub output_format: Option<OutputFormat>,
    /// The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<Size>,
    /// The quality of the image generated. Either `low`, `medium`, or `high`.
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Quality>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<Box<models::ImageGenUsage>>,
}

impl ImagesResponse {
    /// The response from the image generation endpoint.
    pub fn new(created: i32) -> ImagesResponse {
        ImagesResponse {
            created,
            data: None,
            background: None,
            output_format: None,
            size: None,
            quality: None,
            usage: None,
        }
    }
}
/// The background parameter used for the image generation. Either `transparent` or `opaque`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Background {
    #[serde(rename = "transparent")]
    Transparent,
    #[serde(rename = "opaque")]
    Opaque,
}

impl Default for Background {
    fn default() -> Background {
        Self::Transparent
    }
}
/// The output format of the image generation. Either `png`, `webp`, or `jpeg`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutputFormat {
    #[serde(rename = "png")]
    Png,
    #[serde(rename = "webp")]
    Webp,
    #[serde(rename = "jpeg")]
    Jpeg,
}

impl Default for OutputFormat {
    fn default() -> OutputFormat {
        Self::Png
    }
}
/// The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Size {
    #[serde(rename = "1024x1024")]
    Variant1024x1024,
    #[serde(rename = "1024x1536")]
    Variant1024x1536,
    #[serde(rename = "1536x1024")]
    Variant1536x1024,
}

impl Default for Size {
    fn default() -> Size {
        Self::Variant1024x1024
    }
}
/// The quality of the image generated. Either `low`, `medium`, or `high`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Quality {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
}

impl Default for Quality {
    fn default() -> Quality {
        Self::Low
    }
}

impl std::fmt::Display for ImagesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
