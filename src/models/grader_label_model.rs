/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GraderLabelModel : A LabelModelGrader object which uses a model to assign labels to each item in the evaluation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct GraderLabelModel {
    /// The object type, which is always `label_model`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the grader.
    #[serde(rename = "name")]
    pub name: String,
    /// The model to use for the evaluation. Must support structured outputs.
    #[serde(rename = "model")]
    pub model: String,
    #[serde(rename = "input")]
    pub input: Vec<models::EvalItem>,
    /// The labels to assign to each item in the evaluation.
    #[serde(rename = "labels")]
    pub labels: Vec<String>,
    /// The labels that indicate a passing result. Must be a subset of labels.
    #[serde(rename = "passing_labels")]
    pub passing_labels: Vec<String>,
}

impl GraderLabelModel {
    /// A LabelModelGrader object which uses a model to assign labels to each item in the evaluation.
    pub fn new(
        r#type: Type,
        name: String,
        model: String,
        input: Vec<models::EvalItem>,
        labels: Vec<String>,
        passing_labels: Vec<String>,
    ) -> GraderLabelModel {
        GraderLabelModel {
            r#type,
            name,
            model,
            input,
            labels,
            passing_labels,
        }
    }
}
/// The object type, which is always `label_model`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "label_model")]
    LabelModel,
}

impl Default for Type {
    fn default() -> Type {
        Self::LabelModel
    }
}

impl std::fmt::Display for GraderLabelModel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
