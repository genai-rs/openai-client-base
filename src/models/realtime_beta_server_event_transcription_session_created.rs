/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventTranscriptionSessionCreated : Returned when a transcription session is created.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventTranscriptionSessionCreated {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    #[serde(rename = "session")]
    pub session: Box<models::RealtimeTranscriptionSessionCreateResponse>,
}

impl RealtimeBetaServerEventTranscriptionSessionCreated {
    /// Returned when a transcription session is created.
    pub fn new(
        event_id: String,
        r#type: Option<serde_json::Value>,
        session: models::RealtimeTranscriptionSessionCreateResponse,
    ) -> RealtimeBetaServerEventTranscriptionSessionCreated {
        RealtimeBetaServerEventTranscriptionSessionCreated {
            event_id,
            r#type,
            session: Box::new(session),
        }
    }
}

impl std::fmt::Display for RealtimeBetaServerEventTranscriptionSessionCreated {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
