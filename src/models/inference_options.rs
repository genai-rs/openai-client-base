/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InferenceOptions : Model and tool overrides applied when generating the assistant response.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InferenceOptions {
    #[serde(rename = "tool_choice", deserialize_with = "Option::deserialize")]
    pub tool_choice: Option<Box<models::ToolChoice>>,
    /// ID of the model to use
    #[serde(rename = "model")]
    pub model: String,
}

impl InferenceOptions {
    /// Model and tool overrides applied when generating the assistant response.
    pub fn new(tool_choice: Option<models::ToolChoice>, model: String) -> InferenceOptions {
        InferenceOptions {
            tool_choice: tool_choice.map(Box::new),
            model,
        }
    }
}

impl std::fmt::Display for InferenceOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
