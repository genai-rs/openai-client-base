/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CustomToolProperties : Properties of the custom tool. 
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CustomToolProperties {
    /// The name of the custom tool, used to identify it in tool calls.
    #[serde(rename = "name")]
    pub name: String,
    /// Optional description of the custom tool, used to provide more context. 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Box<models::CustomToolPropertiesFormat>>,
}

impl CustomToolProperties {
    /// Properties of the custom tool. 
    pub fn new(name: String) -> CustomToolProperties {
        CustomToolProperties {
            name,
            description: None,
            format: None,
        }
    }
}



impl std::fmt::Display for CustomToolProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
