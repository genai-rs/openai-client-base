/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InputFileContentParam : A file input to the model.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InputFileContentParam {
    /// The type of the input item. Always `input_file`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the file to be sent to the model.
    #[serde(
        rename = "file_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub file_id: Option<Option<String>>,
    /// The name of the file to be sent to the model.
    #[serde(
        rename = "filename",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub filename: Option<Option<String>>,
    /// The base64-encoded data of the file to be sent to the model.
    #[serde(
        rename = "file_data",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub file_data: Option<Option<String>>,
    /// The URL of the file to be sent to the model.
    #[serde(
        rename = "file_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub file_url: Option<Option<String>>,
}

impl InputFileContentParam {
    /// A file input to the model.
    pub fn new(r#type: Type) -> InputFileContentParam {
        InputFileContentParam {
            r#type,
            file_id: None,
            filename: None,
            file_data: None,
            file_url: None,
        }
    }
}
/// The type of the input item. Always `input_file`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "input_file")]
    InputFile,
}

impl Default for Type {
    fn default() -> Type {
        Self::InputFile
    }
}

impl std::fmt::Display for InputFileContentParam {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
