/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CustomToolCall : A call to a custom tool created by the model. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CustomToolCall {
    /// The type of the custom tool call. Always `custom_tool_call`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The unique ID of the custom tool call in the OpenAI platform. 
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// An identifier used to map this custom tool call to a tool call output. 
    #[serde(rename = "call_id")]
    pub call_id: String,
    /// The name of the custom tool being called. 
    #[serde(rename = "name")]
    pub name: String,
    /// The input for the custom tool call generated by the model. 
    #[serde(rename = "input")]
    pub input: String,
}

impl CustomToolCall {
    /// A call to a custom tool created by the model. 
    pub fn new(r#type: Type, call_id: String, name: String, input: String) -> CustomToolCall {
        CustomToolCall {
            r#type,
            id: None,
            call_id,
            name,
            input,
        }
    }
}
/// The type of the custom tool call. Always `custom_tool_call`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "custom_tool_call")]
    CustomToolCall,
}

impl Default for Type {
    fn default() -> Type {
        Self::CustomToolCall
    }
}

