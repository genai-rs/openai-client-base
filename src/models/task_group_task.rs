/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TaskGroupTask : Task entry that appears within a TaskGroup.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct TaskGroupTask {
    #[serde(rename = "type")]
    pub r#type: models::TaskType,
    /// Optional heading for the grouped task. Defaults to null when not provided.
    #[serde(rename = "heading", deserialize_with = "Option::deserialize")]
    pub heading: Option<String>,
    /// Optional summary that describes the grouped task. Defaults to null when omitted.
    #[serde(rename = "summary", deserialize_with = "Option::deserialize")]
    pub summary: Option<String>,
}

impl TaskGroupTask {
    /// Task entry that appears within a TaskGroup.
    pub fn new(r#type: models::TaskType, heading: Option<String>, summary: Option<String>) -> TaskGroupTask {
        TaskGroupTask {
            r#type,
            heading,
            summary,
        }
    }
}



impl std::fmt::Display for TaskGroupTask {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
