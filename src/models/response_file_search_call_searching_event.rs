/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseFileSearchCallSearchingEvent : Emitted when a file search is currently searching.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseFileSearchCallSearchingEvent {
    /// The type of the event. Always `response.file_search_call.searching`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The index of the output item that the file search call is searching. 
    #[serde(rename = "output_index")]
    pub output_index: i32,
    /// The ID of the output item that the file search call is initiated. 
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The sequence number of this event.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
}

impl ResponseFileSearchCallSearchingEvent {
    /// Emitted when a file search is currently searching.
    pub fn new(r#type: Type, output_index: i32, item_id: String, sequence_number: i32) -> ResponseFileSearchCallSearchingEvent {
        ResponseFileSearchCallSearchingEvent {
            r#type,
            output_index,
            item_id,
            sequence_number,
        }
    }
}
/// The type of the event. Always `response.file_search_call.searching`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.file_search_call.searching")]
    ResponseFileSearchCallSearching,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseFileSearchCallSearching
    }
}



impl std::fmt::Display for ResponseFileSearchCallSearchingEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
