/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RunStepDetailsToolCallsFileSearchObject {
    /// The ID of the tool call object.
    #[serde(rename = "id")]
    pub id: String,
    /// The type of tool call. This is always going to be `file_search` for this type of tool call.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "file_search")]
    pub file_search: Box<models::RunStepDetailsToolCallsFileSearchObjectFileSearch>,
}

impl RunStepDetailsToolCallsFileSearchObject {
    pub fn new(id: String, r#type: Type, file_search: models::RunStepDetailsToolCallsFileSearchObjectFileSearch) -> RunStepDetailsToolCallsFileSearchObject {
        RunStepDetailsToolCallsFileSearchObject {
            id,
            r#type,
            file_search: Box::new(file_search),
        }
    }
}
/// The type of tool call. This is always going to be `file_search` for this type of tool call.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file_search")]
    FileSearch,
}

impl Default for Type {
    fn default() -> Type {
        Self::FileSearch
    }
}



impl std::fmt::Display for RunStepDetailsToolCallsFileSearchObject {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
