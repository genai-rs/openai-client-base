/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ThreadListResource : A paginated list of ChatKit threads.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ThreadListResource {
    #[serde(rename = "object", deserialize_with = "Option::deserialize")]
    pub object: Option<serde_json::Value>,
    /// A list of items
    #[serde(rename = "data")]
    pub data: Vec<models::ThreadResource>,
    /// The ID of the first item in the list.
    #[serde(rename = "first_id", deserialize_with = "Option::deserialize")]
    pub first_id: Option<String>,
    /// The ID of the last item in the list.
    #[serde(rename = "last_id", deserialize_with = "Option::deserialize")]
    pub last_id: Option<String>,
    /// Whether there are more items available.
    #[serde(rename = "has_more")]
    pub has_more: bool,
}

impl ThreadListResource {
    /// A paginated list of ChatKit threads.
    pub fn new(
        object: Option<serde_json::Value>,
        data: Vec<models::ThreadResource>,
        first_id: Option<String>,
        last_id: Option<String>,
        has_more: bool,
    ) -> ThreadListResource {
        ThreadListResource {
            object,
            data,
            first_id,
            last_id,
            has_more,
        }
    }
}

impl std::fmt::Display for ThreadListResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
