/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatCompletionToolChoiceOption : Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.  `none` is the default when no tools are present. `auto` is the default if tools are present. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionToolChoiceOption {
    /// Allowed tool configuration type. Always `allowed_tools`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "allowed_tools")]
    pub allowed_tools: Box<models::ChatCompletionAllowedTools>,
    #[serde(rename = "function")]
    pub function: Box<models::AssistantsNamedToolChoiceFunction>,
    #[serde(rename = "custom")]
    pub custom: Box<models::ChatCompletionNamedToolChoiceCustomCustom>,
}

impl ChatCompletionToolChoiceOption {
    /// Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.  `none` is the default when no tools are present. `auto` is the default if tools are present. 
    pub fn new(r#type: Type, allowed_tools: models::ChatCompletionAllowedTools, function: models::AssistantsNamedToolChoiceFunction, custom: models::ChatCompletionNamedToolChoiceCustomCustom) -> ChatCompletionToolChoiceOption {
        ChatCompletionToolChoiceOption {
            r#type,
            allowed_tools: Box::new(allowed_tools),
            function: Box::new(function),
            custom: Box::new(custom),
        }
    }
}
/// Allowed tool configuration type. Always `allowed_tools`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "allowed_tools")]
    AllowedTools,
    #[serde(rename = "function")]
    Function,
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Type {
    fn default() -> Type {
        Self::AllowedTools
    }
}

