/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Embedding : Represents an embedding vector returned by embedding endpoint. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct Embedding {
    /// The index of the embedding in the list of embeddings.
    #[serde(rename = "index")]
    pub index: i32,
    /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](https://platform.openai.com/docs/guides/embeddings). 
    #[serde(rename = "embedding")]
    pub embedding: Vec<f32>,
    /// The object type, which is always \"embedding\".
    #[serde(rename = "object")]
    pub object: Object,
}

impl Embedding {
    /// Represents an embedding vector returned by embedding endpoint. 
    pub fn new(index: i32, embedding: Vec<f32>, object: Object) -> Embedding {
        Embedding {
            index,
            embedding,
            object,
        }
    }
}
/// The object type, which is always \"embedding\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "embedding")]
    Embedding,
}

impl Default for Object {
    fn default() -> Object {
        Self::Embedding
    }
}

