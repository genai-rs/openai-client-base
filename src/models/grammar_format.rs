/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GrammarFormat : A grammar defined by the user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct GrammarFormat {
    /// Grammar format. Always `grammar`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The grammar definition.
    #[serde(rename = "definition")]
    pub definition: String,
    /// The syntax of the grammar definition. One of `lark` or `regex`.
    #[serde(rename = "syntax")]
    pub syntax: Syntax,
}

impl GrammarFormat {
    /// A grammar defined by the user.
    pub fn new(r#type: Type, definition: String, syntax: Syntax) -> GrammarFormat {
        GrammarFormat {
            r#type,
            definition,
            syntax,
        }
    }
}
/// Grammar format. Always `grammar`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "grammar")]
    Grammar,
}

impl Default for Type {
    fn default() -> Type {
        Self::Grammar
    }
}
/// The syntax of the grammar definition. One of `lark` or `regex`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Syntax {
    #[serde(rename = "lark")]
    Lark,
    #[serde(rename = "regex")]
    Regex,
}

impl Default for Syntax {
    fn default() -> Syntax {
        Self::Lark
    }
}
