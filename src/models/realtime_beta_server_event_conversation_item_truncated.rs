/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventConversationItemTruncated : Returned when an earlier assistant audio message item is truncated by the  client with a `conversation.item.truncate` event. This event is used to  synchronize the server's understanding of the audio with the client's playback.  This action will truncate the audio and remove the server-side text transcript  to ensure there is no text in the context that hasn't been heard by the user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventConversationItemTruncated {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    /// The ID of the assistant message item that was truncated.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the content part that was truncated.
    #[serde(rename = "content_index")]
    pub content_index: i32,
    /// The duration up to which the audio was truncated, in milliseconds.
    #[serde(rename = "audio_end_ms")]
    pub audio_end_ms: i32,
}

impl RealtimeBetaServerEventConversationItemTruncated {
    /// Returned when an earlier assistant audio message item is truncated by the  client with a `conversation.item.truncate` event. This event is used to  synchronize the server's understanding of the audio with the client's playback.  This action will truncate the audio and remove the server-side text transcript  to ensure there is no text in the context that hasn't been heard by the user.
    pub fn new(
        event_id: String,
        r#type: Option<serde_json::Value>,
        item_id: String,
        content_index: i32,
        audio_end_ms: i32,
    ) -> RealtimeBetaServerEventConversationItemTruncated {
        RealtimeBetaServerEventConversationItemTruncated {
            event_id,
            r#type,
            item_id,
            content_index,
            audio_end_ms,
        }
    }
}

impl std::fmt::Display for RealtimeBetaServerEventConversationItemTruncated {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
