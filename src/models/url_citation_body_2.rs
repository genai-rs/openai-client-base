/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct UrlCitationBody2 {
    /// The type of the URL citation. Always `url_citation`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The URL of the web resource.
    #[serde(rename = "url")]
    pub url: String,
    /// The index of the first character of the URL citation in the message.
    #[serde(rename = "start_index")]
    pub start_index: i32,
    /// The index of the last character of the URL citation in the message.
    #[serde(rename = "end_index")]
    pub end_index: i32,
    /// The title of the web resource.
    #[serde(rename = "title")]
    pub title: String,
}

impl UrlCitationBody2 {
    pub fn new(
        r#type: Type,
        url: String,
        start_index: i32,
        end_index: i32,
        title: String,
    ) -> UrlCitationBody2 {
        UrlCitationBody2 {
            r#type,
            url,
            start_index,
            end_index,
            title,
        }
    }
}
/// The type of the URL citation. Always `url_citation`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "url_citation")]
    UrlCitation,
}

impl Default for Type {
    fn default() -> Type {
        Self::UrlCitation
    }
}
