/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FileSearchToolCall : The results of a file search tool call. See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FileSearchToolCall {
    /// The unique ID of the file search tool call.
    #[serde(rename = "id")]
    pub id: String,
    /// The type of the file search tool call. Always `file_search_call`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The status of the file search tool call. One of `in_progress`, `searching`, `incomplete` or `failed`,
    #[serde(rename = "status")]
    pub status: Status,
    /// The queries used to search for files.
    #[serde(rename = "queries")]
    pub queries: Vec<String>,
    /// The results of the file search tool call.
    #[serde(
        rename = "results",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub results: Option<Option<Vec<models::FileSearchToolCallResultsInner>>>,
}

impl FileSearchToolCall {
    /// The results of a file search tool call. See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
    pub fn new(
        id: String,
        r#type: Type,
        status: Status,
        queries: Vec<String>,
    ) -> FileSearchToolCall {
        FileSearchToolCall {
            id,
            r#type,
            status,
            queries,
            results: None,
        }
    }
}
/// The type of the file search tool call. Always `file_search_call`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file_search_call")]
    FileSearchCall,
}

impl Default for Type {
    fn default() -> Type {
        Self::FileSearchCall
    }
}
/// The status of the file search tool call. One of `in_progress`, `searching`, `incomplete` or `failed`,
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "searching")]
    Searching,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "incomplete")]
    Incomplete,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}
