/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct VectorStoreSearchResultsPage {
    /// The object type, which is always `vector_store.search_results.page`
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "search_query")]
    pub search_query: Vec<String>,
    /// The list of search result items.
    #[serde(rename = "data")]
    pub data: Vec<models::VectorStoreSearchResultItem>,
    /// Indicates if there are more results to fetch.
    #[serde(rename = "has_more")]
    pub has_more: bool,
    /// The token for the next page, if any.
    #[serde(rename = "next_page")]
    pub next_page: String,
}

impl VectorStoreSearchResultsPage {
    pub fn new(
        object: Object,
        search_query: Vec<String>,
        data: Vec<models::VectorStoreSearchResultItem>,
        has_more: bool,
        next_page: String,
    ) -> VectorStoreSearchResultsPage {
        VectorStoreSearchResultsPage {
            object,
            search_query,
            data,
            has_more,
            next_page,
        }
    }
}
/// The object type, which is always `vector_store.search_results.page`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "vector_store.search_results.page")]
    VectorStoreSearchResultsPage,
}

impl Default for Object {
    fn default() -> Object {
        Self::VectorStoreSearchResultsPage
    }
}
