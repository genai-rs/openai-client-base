/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailed : Returned when input audio transcription is configured, and a transcription  request for a user message failed. These events are separate from other  `error` events so that the client can identify the related Item. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailed {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// The event type, must be `conversation.item.input_audio_transcription.failed`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the user message item.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the content part containing the audio.
    #[serde(rename = "content_index")]
    pub content_index: i32,
    #[serde(rename = "error")]
    pub error: Box<models::RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailedError>,
}

impl RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailed {
    /// Returned when input audio transcription is configured, and a transcription  request for a user message failed. These events are separate from other  `error` events so that the client can identify the related Item. 
    pub fn new(event_id: String, r#type: Type, item_id: String, content_index: i32, error: models::RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailedError) -> RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailed {
        RealtimeBetaServerEventConversationItemInputAudioTranscriptionFailed {
            event_id,
            r#type,
            item_id,
            content_index,
            error: Box::new(error),
        }
    }
}
/// The event type, must be `conversation.item.input_audio_transcription.failed`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "conversation.item.input_audio_transcription.failed")]
    ConversationItemInputAudioTranscriptionFailed,
}

impl Default for Type {
    fn default() -> Type {
        Self::ConversationItemInputAudioTranscriptionFailed
    }
}

