/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ApproximateLocation {
    /// The type of location approximation. Always `approximate`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`.
    #[serde(
        rename = "country",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub country: Option<Option<String>>,
    /// Free text input for the region of the user, e.g. `California`.
    #[serde(
        rename = "region",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub region: Option<Option<String>>,
    /// Free text input for the city of the user, e.g. `San Francisco`.
    #[serde(
        rename = "city",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub city: Option<Option<String>>,
    /// The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`.
    #[serde(
        rename = "timezone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub timezone: Option<Option<String>>,
}

impl ApproximateLocation {
    pub fn new(r#type: Type) -> ApproximateLocation {
        ApproximateLocation {
            r#type,
            country: None,
            region: None,
            city: None,
            timezone: None,
        }
    }
}
/// The type of location approximation. Always `approximate`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "approximate")]
    Approximate,
}

impl Default for Type {
    fn default() -> Type {
        Self::Approximate
    }
}
