/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateThreadRequestToolResourcesAnyOfFileSearch {
    /// The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
    #[serde(rename = "vector_store_ids", skip_serializing_if = "Option::is_none")]
    pub vector_store_ids: Option<Vec<String>>,
    /// A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
    #[serde(rename = "vector_stores", skip_serializing_if = "Option::is_none")]
    pub vector_stores:
        Option<Vec<models::CreateAssistantRequestToolResourcesAnyOfFileSearchVectorStoresInner>>,
}

impl CreateThreadRequestToolResourcesAnyOfFileSearch {
    pub fn new() -> CreateThreadRequestToolResourcesAnyOfFileSearch {
        CreateThreadRequestToolResourcesAnyOfFileSearch {
            vector_store_ids: None,
            vector_stores: None,
        }
    }
}

impl std::fmt::Display for CreateThreadRequestToolResourcesAnyOfFileSearch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
