/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RunStepDetailsToolCallsFileSearchResultObject : A result instance of the file search.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RunStepDetailsToolCallsFileSearchResultObject {
    /// The ID of the file that result was found in.
    #[serde(rename = "file_id")]
    pub file_id: String,
    /// The name of the file that result was found in.
    #[serde(rename = "file_name")]
    pub file_name: String,
    /// The score of the result. All values must be a floating point number between 0 and 1.
    #[serde(rename = "score")]
    pub score: f64,
    /// The content of the result that was found. The content is only included if requested via the include query parameter.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<models::RunStepDetailsToolCallsFileSearchResultObjectContentInner>>,
}

impl RunStepDetailsToolCallsFileSearchResultObject {
    /// A result instance of the file search.
    pub fn new(file_id: String, file_name: String, score: f64) -> RunStepDetailsToolCallsFileSearchResultObject {
        RunStepDetailsToolCallsFileSearchResultObject {
            file_id,
            file_name,
            score,
            content: None,
        }
    }
}



impl std::fmt::Display for RunStepDetailsToolCallsFileSearchResultObject {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
