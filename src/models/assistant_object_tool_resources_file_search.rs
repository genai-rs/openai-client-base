/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct AssistantObjectToolResourcesFileSearch {
    /// The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant. 
    #[serde(rename = "vector_store_ids", skip_serializing_if = "Option::is_none")]
    pub vector_store_ids: Option<Vec<String>>,
}

impl AssistantObjectToolResourcesFileSearch {
    pub fn new() -> AssistantObjectToolResourcesFileSearch {
        AssistantObjectToolResourcesFileSearch {
            vector_store_ids: None,
        }
    }
}



impl std::fmt::Display for AssistantObjectToolResourcesFileSearch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
