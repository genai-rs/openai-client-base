/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Content : Multi-modal input and output contents. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct Content {
    /// The type of the input item. Always `input_audio`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The text output from the model.
    #[serde(rename = "text")]
    pub text: String,
    /// The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    /// The ID of the file to be sent to the model.
    #[serde(rename = "file_id", skip_serializing_if = "Option::is_none")]
    pub file_id: Option<String>,
    /// The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
    #[serde(rename = "detail")]
    pub detail: Detail,
    /// The name of the file to be sent to the model.
    #[serde(rename = "filename", skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
    /// The URL of the file to be sent to the model.
    #[serde(rename = "file_url", skip_serializing_if = "Option::is_none")]
    pub file_url: Option<String>,
    /// The content of the file to be sent to the model. 
    #[serde(rename = "file_data", skip_serializing_if = "Option::is_none")]
    pub file_data: Option<String>,
    #[serde(rename = "input_audio")]
    pub input_audio: Box<models::InputAudioInputAudio>,
    /// The annotations of the text output.
    #[serde(rename = "annotations")]
    pub annotations: Vec<models::Annotation>,
    #[serde(rename = "logprobs", skip_serializing_if = "Option::is_none")]
    pub logprobs: Option<Vec<models::LogProb>>,
    /// The refusal explanation from the model.
    #[serde(rename = "refusal")]
    pub refusal: String,
}

impl Content {
    /// Multi-modal input and output contents. 
    pub fn new(r#type: Type, text: String, detail: Detail, input_audio: models::InputAudioInputAudio, annotations: Vec<models::Annotation>, refusal: String) -> Content {
        Content {
            r#type,
            text,
            image_url: None,
            file_id: None,
            detail,
            filename: None,
            file_url: None,
            file_data: None,
            input_audio: Box::new(input_audio),
            annotations,
            logprobs: None,
            refusal,
        }
    }
}
/// The type of the input item. Always `input_audio`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "input_audio")]
    InputAudio,
    #[serde(rename = "refusal")]
    Refusal,
}

impl Default for Type {
    fn default() -> Type {
        Self::InputAudio
    }
}
/// The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Detail {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Detail {
    fn default() -> Detail {
        Self::Low
    }
}

