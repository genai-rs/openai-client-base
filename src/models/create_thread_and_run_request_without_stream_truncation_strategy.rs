/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateThreadAndRunRequestWithoutStreamTruncationStrategy {
    /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The number of most recent messages from the thread when constructing the context for the run.
    #[serde(rename = "last_messages", skip_serializing_if = "Option::is_none")]
    pub last_messages: Option<i32>,
}

impl CreateThreadAndRunRequestWithoutStreamTruncationStrategy {
    pub fn new(r#type: Type) -> CreateThreadAndRunRequestWithoutStreamTruncationStrategy {
        CreateThreadAndRunRequestWithoutStreamTruncationStrategy {
            r#type,
            last_messages: None,
        }
    }
}
/// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "last_messages")]
    LastMessages,
}

impl Default for Type {
    fn default() -> Type {
        Self::Auto
    }
}

impl std::fmt::Display for CreateThreadAndRunRequestWithoutStreamTruncationStrategy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
