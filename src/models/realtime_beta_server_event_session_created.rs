/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventSessionCreated : Returned when a Session is created. Emitted automatically when a new  connection is established as the first server event. This event will contain  the default Session configuration.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventSessionCreated {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    #[serde(rename = "session")]
    pub session: Box<models::RealtimeSession>,
}

impl RealtimeBetaServerEventSessionCreated {
    /// Returned when a Session is created. Emitted automatically when a new  connection is established as the first server event. This event will contain  the default Session configuration.
    pub fn new(
        event_id: String,
        r#type: Option<serde_json::Value>,
        session: models::RealtimeSession,
    ) -> RealtimeBetaServerEventSessionCreated {
        RealtimeBetaServerEventSessionCreated {
            event_id,
            r#type,
            session: Box::new(session),
        }
    }
}
