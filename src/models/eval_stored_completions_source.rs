/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EvalStoredCompletionsSource : A StoredCompletionsRunDataSource configuration describing a set of filters
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct EvalStoredCompletionsSource {
    /// The type of source. Always `stored_completions`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.  Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
    #[serde(
        rename = "metadata",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub metadata: Option<Option<std::collections::HashMap<String, String>>>,
    /// ID of the model to use
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// An optional Unix timestamp to filter items created after this time.
    #[serde(
        rename = "created_after",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_after: Option<Option<i32>>,
    /// An optional Unix timestamp to filter items created before this time.
    #[serde(
        rename = "created_before",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_before: Option<Option<i32>>,
    /// An optional maximum number of items to return.
    #[serde(
        rename = "limit",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub limit: Option<Option<i32>>,
}

impl EvalStoredCompletionsSource {
    /// A StoredCompletionsRunDataSource configuration describing a set of filters
    pub fn new(r#type: Type) -> EvalStoredCompletionsSource {
        EvalStoredCompletionsSource {
            r#type,
            metadata: None,
            model: None,
            created_after: None,
            created_before: None,
            limit: None,
        }
    }
}
/// The type of source. Always `stored_completions`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "stored_completions")]
    StoredCompletions,
}

impl Default for Type {
    fn default() -> Type {
        Self::StoredCompletions
    }
}
