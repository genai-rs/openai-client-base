/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ImageEditPartialImageEvent : Emitted when a partial image is available during image editing streaming. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ImageEditPartialImageEvent {
    /// The type of the event. Always `image_edit.partial_image`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Base64-encoded partial image data, suitable for rendering as an image. 
    #[serde(rename = "b64_json")]
    pub b64_json: String,
    /// The Unix timestamp when the event was created. 
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The size of the requested edited image. 
    #[serde(rename = "size")]
    pub size: Size,
    /// The quality setting for the requested edited image. 
    #[serde(rename = "quality")]
    pub quality: Quality,
    /// The background setting for the requested edited image. 
    #[serde(rename = "background")]
    pub background: Background,
    /// The output format for the requested edited image. 
    #[serde(rename = "output_format")]
    pub output_format: OutputFormat,
    /// 0-based index for the partial image (streaming). 
    #[serde(rename = "partial_image_index")]
    pub partial_image_index: i32,
}

impl ImageEditPartialImageEvent {
    /// Emitted when a partial image is available during image editing streaming. 
    pub fn new(r#type: Type, b64_json: String, created_at: i32, size: Size, quality: Quality, background: Background, output_format: OutputFormat, partial_image_index: i32) -> ImageEditPartialImageEvent {
        ImageEditPartialImageEvent {
            r#type,
            b64_json,
            created_at,
            size,
            quality,
            background,
            output_format,
            partial_image_index,
        }
    }
}
/// The type of the event. Always `image_edit.partial_image`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "image_edit.partial_image")]
    ImageEditPartialImage,
}

impl Default for Type {
    fn default() -> Type {
        Self::ImageEditPartialImage
    }
}
/// The size of the requested edited image. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Size {
    #[serde(rename = "1024x1024")]
    Variant1024x1024,
    #[serde(rename = "1024x1536")]
    Variant1024x1536,
    #[serde(rename = "1536x1024")]
    Variant1536x1024,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Size {
    fn default() -> Size {
        Self::Variant1024x1024
    }
}
/// The quality setting for the requested edited image. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Quality {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Quality {
    fn default() -> Quality {
        Self::Low
    }
}
/// The background setting for the requested edited image. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Background {
    #[serde(rename = "transparent")]
    Transparent,
    #[serde(rename = "opaque")]
    Opaque,
    #[serde(rename = "auto")]
    Auto,
}

impl Default for Background {
    fn default() -> Background {
        Self::Transparent
    }
}
/// The output format for the requested edited image. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutputFormat {
    #[serde(rename = "png")]
    Png,
    #[serde(rename = "webp")]
    Webp,
    #[serde(rename = "jpeg")]
    Jpeg,
}

impl Default for OutputFormat {
    fn default() -> OutputFormat {
        Self::Png
    }
}



impl std::fmt::Display for ImageEditPartialImageEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
