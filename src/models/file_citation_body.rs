/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FileCitationBody : A citation to a file.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FileCitationBody {
    /// The type of the file citation. Always `file_citation`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the file.
    #[serde(rename = "file_id")]
    pub file_id: String,
    /// The index of the file in the list of files.
    #[serde(rename = "index")]
    pub index: i32,
    /// The filename of the file cited.
    #[serde(rename = "filename")]
    pub filename: String,
}

impl FileCitationBody {
    /// A citation to a file.
    pub fn new(r#type: Type, file_id: String, index: i32, filename: String) -> FileCitationBody {
        FileCitationBody {
            r#type,
            file_id,
            index,
            filename,
        }
    }
}
/// The type of the file citation. Always `file_citation`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file_citation")]
    FileCitation,
}

impl Default for Type {
    fn default() -> Type {
        Self::FileCitation
    }
}

impl std::fmt::Display for FileCitationBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
