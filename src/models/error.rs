/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct Error {
    #[serde(rename = "code", deserialize_with = "Option::deserialize")]
    pub code: Option<String>,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "param", deserialize_with = "Option::deserialize")]
    pub param: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

impl Error {
    pub fn new(code: Option<String>, message: String, param: Option<String>, r#type: String) -> Error {
        Error {
            code,
            message,
            param,
            r#type,
        }
    }
}



impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
