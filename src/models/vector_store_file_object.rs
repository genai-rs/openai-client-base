/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// VectorStoreFileObject : A list of files attached to a vector store.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct VectorStoreFileObject {
    /// The identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The object type, which is always `vector_store.file`.
    #[serde(rename = "object")]
    pub object: Object,
    /// The total vector store usage in bytes. Note that this may be different from the original file size.
    #[serde(rename = "usage_bytes")]
    pub usage_bytes: i32,
    /// The Unix timestamp (in seconds) for when the vector store file was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to.
    #[serde(rename = "vector_store_id")]
    pub vector_store_id: String,
    /// The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "last_error", deserialize_with = "Option::deserialize")]
    pub last_error: Option<Box<models::VectorStoreFileObjectLastError>>,
    #[serde(rename = "chunking_strategy", skip_serializing_if = "Option::is_none")]
    pub chunking_strategy: Option<Box<models::ChunkingStrategyResponse>>,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters, booleans, or numbers. 
    #[serde(rename = "attributes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Option<std::collections::HashMap<String, models::VectorStoreFileAttributesValue>>>,
}

impl VectorStoreFileObject {
    /// A list of files attached to a vector store.
    pub fn new(id: String, object: Object, usage_bytes: i32, created_at: i32, vector_store_id: String, status: Status, last_error:Option<models::VectorStoreFileObjectLastError>) -> VectorStoreFileObject {
        VectorStoreFileObject {
            id,
            object,
            usage_bytes,
            created_at,
            vector_store_id,
            status,
            last_error: last_error.map(Box::new),
            chunking_strategy: None,
            attributes: None,
        }
    }
}
/// The object type, which is always `vector_store.file`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "vector_store.file")]
    VectorStoreFile,
}

impl Default for Object {
    fn default() -> Object {
        Self::VectorStoreFile
    }
}
/// The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}



impl std::fmt::Display for VectorStoreFileObject {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
