/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EvalResponsesSource : A EvalResponsesSource object describing a run data source configuration. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct EvalResponsesSource {
    /// The type of run data source. Always `responses`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Metadata filter for the responses. This is a query parameter used to select responses.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    /// The name of the model to find responses for. This is a query parameter used to select responses.
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// Optional string to search the 'instructions' field. This is a query parameter used to select responses.
    #[serde(rename = "instructions_search", skip_serializing_if = "Option::is_none")]
    pub instructions_search: Option<String>,
    /// Only include items created after this timestamp (inclusive). This is a query parameter used to select responses.
    #[serde(rename = "created_after", skip_serializing_if = "Option::is_none")]
    pub created_after: Option<i32>,
    /// Only include items created before this timestamp (inclusive). This is a query parameter used to select responses.
    #[serde(rename = "created_before", skip_serializing_if = "Option::is_none")]
    pub created_before: Option<i32>,
    #[serde(rename = "reasoning_effort", skip_serializing_if = "Option::is_none")]
    pub reasoning_effort: Option<models::ReasoningEffort>,
    /// Sampling temperature. This is a query parameter used to select responses.
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// Nucleus sampling parameter. This is a query parameter used to select responses.
    #[serde(rename = "top_p", skip_serializing_if = "Option::is_none")]
    pub top_p: Option<f64>,
    /// List of user identifiers. This is a query parameter used to select responses.
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    /// List of tool names. This is a query parameter used to select responses.
    #[serde(rename = "tools", skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<String>>,
}

impl EvalResponsesSource {
    /// A EvalResponsesSource object describing a run data source configuration. 
    pub fn new(r#type: Type) -> EvalResponsesSource {
        EvalResponsesSource {
            r#type,
            metadata: None,
            model: None,
            instructions_search: None,
            created_after: None,
            created_before: None,
            reasoning_effort: None,
            temperature: None,
            top_p: None,
            users: None,
            tools: None,
        }
    }
}
/// The type of run data source. Always `responses`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "responses")]
    Responses,
}

impl Default for Type {
    fn default() -> Type {
        Self::Responses
    }
}

