/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EvalStoredCompletionsDataSourceConfig : Deprecated in favor of LogsDataSourceConfig.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct EvalStoredCompletionsDataSourceConfig {
    /// The type of data source. Always `stored_completions`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.  Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
    #[serde(
        rename = "metadata",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub metadata: Option<Option<std::collections::HashMap<String, String>>>,
    /// The json schema for the run data source items. Learn how to build JSON schemas [here](https://json-schema.org/).
    #[serde(rename = "schema")]
    pub schema: std::collections::HashMap<String, serde_json::Value>,
}

impl EvalStoredCompletionsDataSourceConfig {
    /// Deprecated in favor of LogsDataSourceConfig.
    pub fn new(
        r#type: Type,
        schema: std::collections::HashMap<String, serde_json::Value>,
    ) -> EvalStoredCompletionsDataSourceConfig {
        EvalStoredCompletionsDataSourceConfig {
            r#type,
            metadata: None,
            schema,
        }
    }
}
/// The type of data source. Always `stored_completions`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "stored_completions")]
    StoredCompletions,
}

impl Default for Type {
    fn default() -> Type {
        Self::StoredCompletions
    }
}

impl std::fmt::Display for EvalStoredCompletionsDataSourceConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
