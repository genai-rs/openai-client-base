/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseAudioDeltaEvent : Emitted when there is a partial audio response.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseAudioDeltaEvent {
    /// The type of the event. Always `response.audio.delta`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// A sequence number for this chunk of the stream response.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
    /// A chunk of Base64 encoded response audio bytes.
    #[serde(rename = "delta")]
    pub delta: String,
}

impl ResponseAudioDeltaEvent {
    /// Emitted when there is a partial audio response.
    pub fn new(r#type: Type, sequence_number: i32, delta: String) -> ResponseAudioDeltaEvent {
        ResponseAudioDeltaEvent {
            r#type,
            sequence_number,
            delta,
        }
    }
}
/// The type of the event. Always `response.audio.delta`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.audio.delta")]
    ResponseAudioDelta,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseAudioDelta
    }
}
