/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaResponseCreateParamsToolChoice : How the model chooses tools. Provide one of the string modes or force a specific function/MCP tool.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaResponseCreateParamsToolChoice {
    /// For function calling, the type is always `function`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the tool to call on the server.
    #[serde(rename = "name")]
    pub name: String,
    /// The label of the MCP server to use.
    #[serde(rename = "server_label")]
    pub server_label: String,
}

impl RealtimeBetaResponseCreateParamsToolChoice {
    /// How the model chooses tools. Provide one of the string modes or force a specific function/MCP tool.
    pub fn new(
        r#type: Type,
        name: String,
        server_label: String,
    ) -> RealtimeBetaResponseCreateParamsToolChoice {
        RealtimeBetaResponseCreateParamsToolChoice {
            r#type,
            name,
            server_label,
        }
    }
}
/// For function calling, the type is always `function`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "function")]
    Function,
    #[serde(rename = "mcp")]
    Mcp,
}

impl Default for Type {
    fn default() -> Type {
        Self::Function
    }
}
