/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuditLogIpAllowlistCreated : The details for events with this `type`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct AuditLogIpAllowlistCreated {
    /// The ID of the IP allowlist configuration.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the IP allowlist configuration.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The IP addresses or CIDR ranges included in the configuration.
    #[serde(rename = "allowed_ips", skip_serializing_if = "Option::is_none")]
    pub allowed_ips: Option<Vec<String>>,
}

impl AuditLogIpAllowlistCreated {
    /// The details for events with this `type`.
    pub fn new() -> AuditLogIpAllowlistCreated {
        AuditLogIpAllowlistCreated {
            id: None,
            name: None,
            allowed_ips: None,
        }
    }
}



impl std::fmt::Display for AuditLogIpAllowlistCreated {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
