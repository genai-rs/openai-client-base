/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageDeltaContentTextObject : The text content that is part of a message.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct MessageDeltaContentTextObject {
    /// The index of the content part in the message.
    #[serde(rename = "index")]
    pub index: i32,
    /// Always `text`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<Box<models::MessageDeltaContentTextObjectText>>,
}

impl MessageDeltaContentTextObject {
    /// The text content that is part of a message.
    pub fn new(index: i32, r#type: Type) -> MessageDeltaContentTextObject {
        MessageDeltaContentTextObject {
            index,
            r#type,
            text: None,
        }
    }
}
/// Always `text`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}



impl std::fmt::Display for MessageDeltaContentTextObject {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
