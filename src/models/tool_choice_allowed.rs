/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ToolChoiceAllowed : Constrains the tools available to the model to a pre-defined set. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ToolChoiceAllowed {
    /// Allowed tool configuration type. Always `allowed_tools`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Constrains the tools available to the model to a pre-defined set.  `auto` allows the model to pick from among the allowed tools and generate a message.  `required` requires the model to call one or more of the allowed tools. 
    #[serde(rename = "mode")]
    pub mode: Mode,
    /// A list of tool definitions that the model should be allowed to call.  For the Responses API, the list of tool definitions might look like: ```json [   { \"type\": \"function\", \"name\": \"get_weather\" },   { \"type\": \"mcp\", \"server_label\": \"deepwiki\" },   { \"type\": \"image_generation\" } ] ``` 
    #[serde(rename = "tools")]
    pub tools: Vec<std::collections::HashMap<String, serde_json::Value>>,
}

impl ToolChoiceAllowed {
    /// Constrains the tools available to the model to a pre-defined set. 
    pub fn new(r#type: Type, mode: Mode, tools: Vec<std::collections::HashMap<String, serde_json::Value>>) -> ToolChoiceAllowed {
        ToolChoiceAllowed {
            r#type,
            mode,
            tools,
        }
    }
}
/// Allowed tool configuration type. Always `allowed_tools`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "allowed_tools")]
    AllowedTools,
}

impl Default for Type {
    fn default() -> Type {
        Self::AllowedTools
    }
}
/// Constrains the tools available to the model to a pre-defined set.  `auto` allows the model to pick from among the allowed tools and generate a message.  `required` requires the model to call one or more of the allowed tools. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "required")]
    Required,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Auto
    }
}



impl std::fmt::Display for ToolChoiceAllowed {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
