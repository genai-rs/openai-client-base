/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ThreadResource : Represents a ChatKit thread and its current status.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ThreadResource {
    /// Identifier of the thread.
    #[serde(rename = "id")]
    pub id: String,
    /// Type discriminator that is always `chatkit.thread`.
    #[serde(rename = "object")]
    pub object: Object,
    /// Unix timestamp (in seconds) for when the thread was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// Optional human-readable title for the thread. Defaults to null when no title has been generated.
    #[serde(rename = "title", deserialize_with = "Option::deserialize")]
    pub title: Option<String>,
    #[serde(rename = "status")]
    pub status: Box<models::ThreadResourceStatus>,
    /// Free-form string that identifies your end user who owns the thread.
    #[serde(rename = "user")]
    pub user: String,
}

impl ThreadResource {
    /// Represents a ChatKit thread and its current status.
    pub fn new(id: String, object: Object, created_at: i32, title: Option<String>, status: models::ThreadResourceStatus, user: String) -> ThreadResource {
        ThreadResource {
            id,
            object,
            created_at,
            title,
            status: Box::new(status),
            user,
        }
    }
}
/// Type discriminator that is always `chatkit.thread`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "chatkit.thread")]
    ChatkitThread,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChatkitThread
    }
}



impl std::fmt::Display for ThreadResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
