/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatkitConfigurationParam : Optional per-session configuration settings for ChatKit behavior.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatkitConfigurationParam {
    #[serde(rename = "automatic_thread_titling", skip_serializing_if = "Option::is_none")]
    pub automatic_thread_titling: Option<Box<models::AutomaticThreadTitlingParam>>,
    #[serde(rename = "file_upload", skip_serializing_if = "Option::is_none")]
    pub file_upload: Option<Box<models::FileUploadParam>>,
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<Box<models::HistoryParam>>,
}

impl ChatkitConfigurationParam {
    /// Optional per-session configuration settings for ChatKit behavior.
    pub fn new() -> ChatkitConfigurationParam {
        ChatkitConfigurationParam {
            automatic_thread_titling: None,
            file_upload: None,
            history: None,
        }
    }
}



impl std::fmt::Display for ChatkitConfigurationParam {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
