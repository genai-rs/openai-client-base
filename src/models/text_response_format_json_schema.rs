/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TextResponseFormatJsonSchema : JSON Schema response format. Used to generate structured JSON responses. Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs). 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct TextResponseFormatJsonSchema {
    /// The type of response format being defined. Always `json_schema`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// A description of what the response format is for, used by the model to determine how to respond in the format. 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. 
    #[serde(rename = "name")]
    pub name: String,
    /// The schema for the response format, described as a JSON Schema object. Learn how to build JSON schemas [here](https://json-schema.org/). 
    #[serde(rename = "schema")]
    pub schema: std::collections::HashMap<String, serde_json::Value>,
    /// Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs). 
    #[serde(rename = "strict", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub strict: Option<Option<bool>>,
}

impl TextResponseFormatJsonSchema {
    /// JSON Schema response format. Used to generate structured JSON responses. Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs). 
    pub fn new(r#type: Type, name: String, schema: std::collections::HashMap<String, serde_json::Value>) -> TextResponseFormatJsonSchema {
        TextResponseFormatJsonSchema {
            r#type,
            description: None,
            name,
            schema,
            strict: None,
        }
    }
}
/// The type of response format being defined. Always `json_schema`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "json_schema")]
    JsonSchema,
}

impl Default for Type {
    fn default() -> Type {
        Self::JsonSchema
    }
}



impl std::fmt::Display for TextResponseFormatJsonSchema {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
