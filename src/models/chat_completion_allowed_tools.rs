/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatCompletionAllowedTools : Constrains the tools available to the model to a pre-defined set.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ChatCompletionAllowedTools {
    /// Constrains the tools available to the model to a pre-defined set.  `auto` allows the model to pick from among the allowed tools and generate a message.  `required` requires the model to call one or more of the allowed tools.
    #[serde(rename = "mode")]
    pub mode: Mode,
    /// A list of tool definitions that the model should be allowed to call.  For the Chat Completions API, the list of tool definitions might look like: ```json [   { \"type\": \"function\", \"function\": { \"name\": \"get_weather\" } },   { \"type\": \"function\", \"function\": { \"name\": \"get_time\" } } ] ```
    #[serde(rename = "tools")]
    pub tools: Vec<std::collections::HashMap<String, serde_json::Value>>,
}

impl ChatCompletionAllowedTools {
    /// Constrains the tools available to the model to a pre-defined set.
    pub fn new(
        mode: Mode,
        tools: Vec<std::collections::HashMap<String, serde_json::Value>>,
    ) -> ChatCompletionAllowedTools {
        ChatCompletionAllowedTools { mode, tools }
    }
}
/// Constrains the tools available to the model to a pre-defined set.  `auto` allows the model to pick from among the allowed tools and generate a message.  `required` requires the model to call one or more of the allowed tools.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "required")]
    Required,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Auto
    }
}

impl std::fmt::Display for ChatCompletionAllowedTools {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
