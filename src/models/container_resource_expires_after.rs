/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ContainerResourceExpiresAfter : The container will expire after this time period. The anchor is the reference point for the expiration. The minutes is the number of minutes after the anchor before the container expires. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ContainerResourceExpiresAfter {
    /// The reference point for the expiration.
    #[serde(rename = "anchor", skip_serializing_if = "Option::is_none")]
    pub anchor: Option<Anchor>,
    /// The number of minutes after the anchor before the container expires.
    #[serde(rename = "minutes", skip_serializing_if = "Option::is_none")]
    pub minutes: Option<i32>,
}

impl ContainerResourceExpiresAfter {
    /// The container will expire after this time period. The anchor is the reference point for the expiration. The minutes is the number of minutes after the anchor before the container expires. 
    pub fn new() -> ContainerResourceExpiresAfter {
        ContainerResourceExpiresAfter {
            anchor: None,
            minutes: None,
        }
    }
}
/// The reference point for the expiration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Anchor {
    #[serde(rename = "last_active_at")]
    LastActiveAt,
}

impl Default for Anchor {
    fn default() -> Anchor {
        Self::LastActiveAt
    }
}



impl std::fmt::Display for ContainerResourceExpiresAfter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
