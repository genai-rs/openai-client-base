/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// McpListTools : A list of tools available on an MCP server.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct McpListTools {
    /// The type of the item. Always `mcp_list_tools`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The unique ID of the list.
    #[serde(rename = "id")]
    pub id: String,
    /// The label of the MCP server.
    #[serde(rename = "server_label")]
    pub server_label: String,
    /// The tools available on the server.
    #[serde(rename = "tools")]
    pub tools: Vec<models::McpListToolsTool>,
    /// Error message if the server could not list tools.
    #[serde(
        rename = "error",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub error: Option<Option<String>>,
}

impl McpListTools {
    /// A list of tools available on an MCP server.
    pub fn new(
        r#type: Type,
        id: String,
        server_label: String,
        tools: Vec<models::McpListToolsTool>,
    ) -> McpListTools {
        McpListTools {
            r#type,
            id,
            server_label,
            tools,
            error: None,
        }
    }
}
/// The type of the item. Always `mcp_list_tools`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "mcp_list_tools")]
    McpListTools,
}

impl Default for Type {
    fn default() -> Type {
        Self::McpListTools
    }
}

impl std::fmt::Display for McpListTools {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
