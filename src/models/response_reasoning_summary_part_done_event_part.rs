/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseReasoningSummaryPartDoneEventPart : The completed summary part.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseReasoningSummaryPartDoneEventPart {
    /// The type of the summary part. Always `summary_text`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The text of the summary part.
    #[serde(rename = "text")]
    pub text: String,
}

impl ResponseReasoningSummaryPartDoneEventPart {
    /// The completed summary part.
    pub fn new(r#type: Type, text: String) -> ResponseReasoningSummaryPartDoneEventPart {
        ResponseReasoningSummaryPartDoneEventPart { r#type, text }
    }
}
/// The type of the summary part. Always `summary_text`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "summary_text")]
    SummaryText,
}

impl Default for Type {
    fn default() -> Type {
        Self::SummaryText
    }
}
