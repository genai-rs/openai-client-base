/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventConversationItemInputAudioTranscriptionSegment : Returned when an input audio transcription segment is identified for an item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventConversationItemInputAudioTranscriptionSegment {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    /// The ID of the item containing the input audio content.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the input audio content part within the item.
    #[serde(rename = "content_index")]
    pub content_index: i32,
    /// The text for this segment.
    #[serde(rename = "text")]
    pub text: String,
    /// The segment identifier.
    #[serde(rename = "id")]
    pub id: String,
    /// The detected speaker label for this segment.
    #[serde(rename = "speaker")]
    pub speaker: String,
    /// Start time of the segment in seconds.
    #[serde(rename = "start")]
    pub start: f32,
    /// End time of the segment in seconds.
    #[serde(rename = "end")]
    pub end: f32,
}

impl RealtimeBetaServerEventConversationItemInputAudioTranscriptionSegment {
    /// Returned when an input audio transcription segment is identified for an item.
    pub fn new(
        event_id: String,
        r#type: Option<serde_json::Value>,
        item_id: String,
        content_index: i32,
        text: String,
        id: String,
        speaker: String,
        start: f32,
        end: f32,
    ) -> RealtimeBetaServerEventConversationItemInputAudioTranscriptionSegment {
        RealtimeBetaServerEventConversationItemInputAudioTranscriptionSegment {
            event_id,
            r#type,
            item_id,
            content_index,
            text,
            id,
            speaker,
            start,
            end,
        }
    }
}
