/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InputImageContent : An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct InputImageContent {
    /// The type of the input item. Always `input_image`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
    #[serde(rename = "image_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<Option<String>>,
    /// The ID of the file to be sent to the model.
    #[serde(rename = "file_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub file_id: Option<Option<String>>,
    #[serde(rename = "detail")]
    pub detail: models::ImageDetail,
}

impl InputImageContent {
    /// An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
    pub fn new(r#type: Type, detail: models::ImageDetail) -> InputImageContent {
        InputImageContent {
            r#type,
            image_url: None,
            file_id: None,
            detail,
        }
    }
}
/// The type of the input item. Always `input_image`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "input_image")]
    InputImage,
}

impl Default for Type {
    fn default() -> Type {
        Self::InputImage
    }
}



impl std::fmt::Display for InputImageContent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
