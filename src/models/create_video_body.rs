/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateVideoBody : Parameters for creating a new video generation job.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateVideoBody {
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<models::VideoModel>,
    /// Text prompt that describes the video to generate.
    #[serde(rename = "prompt")]
    pub prompt: String,
    /// Optional image reference that guides generation.
    #[serde(rename = "input_reference", skip_serializing_if = "Option::is_none")]
    pub input_reference: Option<std::path::PathBuf>,
    #[serde(rename = "seconds", skip_serializing_if = "Option::is_none")]
    pub seconds: Option<models::VideoSeconds>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<models::VideoSize>,
}

impl CreateVideoBody {
    /// Parameters for creating a new video generation job.
    pub fn new(prompt: String) -> CreateVideoBody {
        CreateVideoBody {
            model: None,
            prompt,
            input_reference: None,
            seconds: None,
            size: None,
        }
    }
}



impl std::fmt::Display for CreateVideoBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
