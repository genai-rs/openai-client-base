/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ThreadObject : Represents a thread that contains [messages](https://platform.openai.com/docs/api-reference/messages).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ThreadObject {
    /// The identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The object type, which is always `thread`.
    #[serde(rename = "object")]
    pub object: Object,
    /// The Unix timestamp (in seconds) for when the thread was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    #[serde(rename = "tool_resources", skip_serializing_if = "Option::is_none")]
    pub tool_resources: Option<Box<models::ModifyThreadRequestToolResources>>,
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
    #[serde(rename = "metadata")]
    pub metadata: std::collections::HashMap<String, String>,
}

impl ThreadObject {
    /// Represents a thread that contains [messages](https://platform.openai.com/docs/api-reference/messages).
    pub fn new(
        id: String,
        object: Object,
        created_at: i32,
        tool_resources: Option<models::ModifyThreadRequestToolResources>,
        metadata: std::collections::HashMap<String, String>,
    ) -> ThreadObject {
        ThreadObject {
            id,
            object,
            created_at,
            tool_resources: tool_resources.map(Box::new),
            metadata,
        }
    }
}
/// The object type, which is always `thread`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "thread")]
    Thread,
}

impl Default for Object {
    fn default() -> Object {
        Self::Thread
    }
}
