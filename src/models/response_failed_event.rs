/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponseFailedEvent : An event that is emitted when a response fails.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponseFailedEvent {
    /// The type of the event. Always `response.failed`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The sequence number of this event.
    #[serde(rename = "sequence_number")]
    pub sequence_number: i32,
    #[serde(rename = "response")]
    pub response: Box<models::Response>,
}

impl ResponseFailedEvent {
    /// An event that is emitted when a response fails.
    pub fn new(
        r#type: Type,
        sequence_number: i32,
        response: models::Response,
    ) -> ResponseFailedEvent {
        ResponseFailedEvent {
            r#type,
            sequence_number,
            response: Box::new(response),
        }
    }
}
/// The type of the event. Always `response.failed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.failed")]
    ResponseFailed,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponseFailed
    }
}
