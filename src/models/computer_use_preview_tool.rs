/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ComputerUsePreviewTool : A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ComputerUsePreviewTool {
    /// The type of the computer use tool. Always `computer_use_preview`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The type of computer environment to control.
    #[serde(rename = "environment")]
    pub environment: Environment,
    /// The width of the computer display.
    #[serde(rename = "display_width")]
    pub display_width: i32,
    /// The height of the computer display.
    #[serde(rename = "display_height")]
    pub display_height: i32,
}

impl ComputerUsePreviewTool {
    /// A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).
    pub fn new(r#type: Type, environment: Environment, display_width: i32, display_height: i32) -> ComputerUsePreviewTool {
        ComputerUsePreviewTool {
            r#type,
            environment,
            display_width,
            display_height,
        }
    }
}
/// The type of the computer use tool. Always `computer_use_preview`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "computer_use_preview")]
    ComputerUsePreview,
}

impl Default for Type {
    fn default() -> Type {
        Self::ComputerUsePreview
    }
}
/// The type of computer environment to control.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Environment {
    #[serde(rename = "windows")]
    Windows,
    #[serde(rename = "mac")]
    Mac,
    #[serde(rename = "linux")]
    Linux,
    #[serde(rename = "ubuntu")]
    Ubuntu,
    #[serde(rename = "browser")]
    Browser,
}

impl Default for Environment {
    fn default() -> Environment {
        Self::Windows
    }
}

