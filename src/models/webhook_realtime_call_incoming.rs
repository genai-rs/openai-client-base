/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebhookRealtimeCallIncoming : Sent when Realtime API Receives a incoming SIP call.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct WebhookRealtimeCallIncoming {
    /// The Unix timestamp (in seconds) of when the model response was completed.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The unique ID of the event.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "data")]
    pub data: Box<models::WebhookRealtimeCallIncomingData>,
    /// The object of the event. Always `event`.
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// The type of the event. Always `realtime.call.incoming`.
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl WebhookRealtimeCallIncoming {
    /// Sent when Realtime API Receives a incoming SIP call.
    pub fn new(
        created_at: i32,
        id: String,
        data: models::WebhookRealtimeCallIncomingData,
        r#type: Type,
    ) -> WebhookRealtimeCallIncoming {
        WebhookRealtimeCallIncoming {
            created_at,
            id,
            data: Box::new(data),
            object: None,
            r#type,
        }
    }
}
/// The object of the event. Always `event`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "event")]
    Event,
}

impl Default for Object {
    fn default() -> Object {
        Self::Event
    }
}
/// The type of the event. Always `realtime.call.incoming`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "realtime.call.incoming")]
    RealtimeCallIncoming,
}

impl Default for Type {
    fn default() -> Type {
        Self::RealtimeCallIncoming
    }
}
