/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaClientEventTranscriptionSessionUpdate : Send this event to update a transcription session. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaClientEventTranscriptionSessionUpdate {
    /// Optional client-generated ID used to identify this event.
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    #[serde(rename = "session")]
    pub session: Box<models::RealtimeTranscriptionSessionCreateRequest>,
}

impl RealtimeBetaClientEventTranscriptionSessionUpdate {
    /// Send this event to update a transcription session. 
    pub fn new(r#type: Option<serde_json::Value>, session: models::RealtimeTranscriptionSessionCreateRequest) -> RealtimeBetaClientEventTranscriptionSessionUpdate {
        RealtimeBetaClientEventTranscriptionSessionUpdate {
            event_id: None,
            r#type,
            session: Box::new(session),
        }
    }
}



impl std::fmt::Display for RealtimeBetaClientEventTranscriptionSessionUpdate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
