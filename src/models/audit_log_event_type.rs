/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuditLogEventType : The event type.
/// The event type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuditLogEventType {
    #[serde(rename = "api_key.created")]
    ApiKeyCreated,
    #[serde(rename = "api_key.updated")]
    ApiKeyUpdated,
    #[serde(rename = "api_key.deleted")]
    ApiKeyDeleted,
    #[serde(rename = "checkpoint_permission.created")]
    CheckpointPermissionCreated,
    #[serde(rename = "checkpoint_permission.deleted")]
    CheckpointPermissionDeleted,
    #[serde(rename = "invite.sent")]
    InviteSent,
    #[serde(rename = "invite.accepted")]
    InviteAccepted,
    #[serde(rename = "invite.deleted")]
    InviteDeleted,
    #[serde(rename = "login.succeeded")]
    LoginSucceeded,
    #[serde(rename = "login.failed")]
    LoginFailed,
    #[serde(rename = "logout.succeeded")]
    LogoutSucceeded,
    #[serde(rename = "logout.failed")]
    LogoutFailed,
    #[serde(rename = "organization.updated")]
    OrganizationUpdated,
    #[serde(rename = "project.created")]
    ProjectCreated,
    #[serde(rename = "project.updated")]
    ProjectUpdated,
    #[serde(rename = "project.archived")]
    ProjectArchived,
    #[serde(rename = "service_account.created")]
    ServiceAccountCreated,
    #[serde(rename = "service_account.updated")]
    ServiceAccountUpdated,
    #[serde(rename = "service_account.deleted")]
    ServiceAccountDeleted,
    #[serde(rename = "rate_limit.updated")]
    RateLimitUpdated,
    #[serde(rename = "rate_limit.deleted")]
    RateLimitDeleted,
    #[serde(rename = "user.added")]
    UserAdded,
    #[serde(rename = "user.updated")]
    UserUpdated,
    #[serde(rename = "user.deleted")]
    UserDeleted,
}

impl std::fmt::Display for AuditLogEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ApiKeyCreated => write!(f, "api_key.created"),
            Self::ApiKeyUpdated => write!(f, "api_key.updated"),
            Self::ApiKeyDeleted => write!(f, "api_key.deleted"),
            Self::CheckpointPermissionCreated => write!(f, "checkpoint_permission.created"),
            Self::CheckpointPermissionDeleted => write!(f, "checkpoint_permission.deleted"),
            Self::InviteSent => write!(f, "invite.sent"),
            Self::InviteAccepted => write!(f, "invite.accepted"),
            Self::InviteDeleted => write!(f, "invite.deleted"),
            Self::LoginSucceeded => write!(f, "login.succeeded"),
            Self::LoginFailed => write!(f, "login.failed"),
            Self::LogoutSucceeded => write!(f, "logout.succeeded"),
            Self::LogoutFailed => write!(f, "logout.failed"),
            Self::OrganizationUpdated => write!(f, "organization.updated"),
            Self::ProjectCreated => write!(f, "project.created"),
            Self::ProjectUpdated => write!(f, "project.updated"),
            Self::ProjectArchived => write!(f, "project.archived"),
            Self::ServiceAccountCreated => write!(f, "service_account.created"),
            Self::ServiceAccountUpdated => write!(f, "service_account.updated"),
            Self::ServiceAccountDeleted => write!(f, "service_account.deleted"),
            Self::RateLimitUpdated => write!(f, "rate_limit.updated"),
            Self::RateLimitDeleted => write!(f, "rate_limit.deleted"),
            Self::UserAdded => write!(f, "user.added"),
            Self::UserUpdated => write!(f, "user.updated"),
            Self::UserDeleted => write!(f, "user.deleted"),
        }
    }
}

impl Default for AuditLogEventType {
    fn default() -> AuditLogEventType {
        Self::ApiKeyCreated
    }
}
