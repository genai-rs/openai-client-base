/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuditLogActor : The actor who performed the audit logged action.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct AuditLogActor {
    /// The type of actor. Is either `session` or `api_key`.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "session", skip_serializing_if = "Option::is_none")]
    pub session: Option<Box<models::AuditLogActorSession>>,
    #[serde(rename = "api_key", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<Box<models::AuditLogActorApiKey>>,
}

impl AuditLogActor {
    /// The actor who performed the audit logged action.
    pub fn new() -> AuditLogActor {
        AuditLogActor {
            r#type: None,
            session: None,
            api_key: None,
        }
    }
}
/// The type of actor. Is either `session` or `api_key`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "session")]
    Session,
    #[serde(rename = "api_key")]
    ApiKey,
}

impl Default for Type {
    fn default() -> Type {
        Self::Session
    }
}
