/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct EvalGraderPython {
    /// The object type, which is always `python`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the grader.
    #[serde(rename = "name")]
    pub name: String,
    /// The source code of the python script.
    #[serde(rename = "source")]
    pub source: String,
    /// The image tag to use for the python script.
    #[serde(rename = "image_tag", skip_serializing_if = "Option::is_none")]
    pub image_tag: Option<String>,
    /// The threshold for the score.
    #[serde(rename = "pass_threshold", skip_serializing_if = "Option::is_none")]
    pub pass_threshold: Option<f64>,
}

impl EvalGraderPython {
    pub fn new(r#type: Type, name: String, source: String) -> EvalGraderPython {
        EvalGraderPython {
            r#type,
            name,
            source,
            image_tag: None,
            pass_threshold: None,
        }
    }
}
/// The object type, which is always `python`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "python")]
    Python,
}

impl Default for Type {
    fn default() -> Type {
        Self::Python
    }
}
