/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DoubleClick : A double click action.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct DoubleClick {
    /// Specifies the event type. For a double click action, this property is  always set to `double_click`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The x-coordinate where the double click occurred.
    #[serde(rename = "x")]
    pub x: i32,
    /// The y-coordinate where the double click occurred.
    #[serde(rename = "y")]
    pub y: i32,
}

impl DoubleClick {
    /// A double click action.
    pub fn new(r#type: Type, x: i32, y: i32) -> DoubleClick {
        DoubleClick { r#type, x, y }
    }
}
/// Specifies the event type. For a double click action, this property is  always set to `double_click`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "double_click")]
    DoubleClick,
}

impl Default for Type {
    fn default() -> Type {
        Self::DoubleClick
    }
}

impl std::fmt::Display for DoubleClick {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
