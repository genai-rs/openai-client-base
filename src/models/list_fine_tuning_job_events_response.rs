/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ListFineTuningJobEventsResponse {
    #[serde(rename = "data")]
    pub data: Vec<models::FineTuningJobEvent>,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "has_more")]
    pub has_more: bool,
}

impl ListFineTuningJobEventsResponse {
    pub fn new(data: Vec<models::FineTuningJobEvent>, object: Object, has_more: bool) -> ListFineTuningJobEventsResponse {
        ListFineTuningJobEventsResponse {
            data,
            object,
            has_more,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "list")]
    List,
}

impl Default for Object {
    fn default() -> Object {
        Self::List
    }
}



impl std::fmt::Display for ListFineTuningJobEventsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
