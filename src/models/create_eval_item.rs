/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateEvalItem : A chat message that makes up the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateEvalItem {
    /// The role of the message input. One of `user`, `assistant`, `system`, or `developer`.
    #[serde(rename = "role")]
    pub role: Role,
    #[serde(rename = "content")]
    pub content: Box<models::EvalItemContent>,
    /// The type of the message input. Always `message`.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl CreateEvalItem {
    /// A chat message that makes up the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
    pub fn new(role: Role, content: models::EvalItemContent) -> CreateEvalItem {
        CreateEvalItem {
            role,
            content: Box::new(content),
            r#type: None,
        }
    }
}
/// The role of the message input. One of `user`, `assistant`, `system`, or `developer`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "assistant")]
    Assistant,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "developer")]
    Developer,
}

impl Default for Role {
    fn default() -> Role {
        Self::User
    }
}
/// The type of the message input. Always `message`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "message")]
    Message,
}

impl Default for Type {
    fn default() -> Type {
        Self::Message
    }
}
