/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ProjectServiceAccountCreateResponse {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    /// Service accounts can only have one role of type `member`
    #[serde(rename = "role")]
    pub role: Role,
    #[serde(rename = "created_at")]
    pub created_at: i32,
    #[serde(rename = "api_key")]
    pub api_key: Box<models::ProjectServiceAccountApiKey>,
}

impl ProjectServiceAccountCreateResponse {
    pub fn new(
        object: Object,
        id: String,
        name: String,
        role: Role,
        created_at: i32,
        api_key: models::ProjectServiceAccountApiKey,
    ) -> ProjectServiceAccountCreateResponse {
        ProjectServiceAccountCreateResponse {
            object,
            id,
            name,
            role,
            created_at,
            api_key: Box::new(api_key),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "organization.project.service_account")]
    OrganizationProjectServiceAccount,
}

impl Default for Object {
    fn default() -> Object {
        Self::OrganizationProjectServiceAccount
    }
}
/// Service accounts can only have one role of type `member`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "member")]
    Member,
}

impl Default for Role {
    fn default() -> Role {
        Self::Member
    }
}

impl std::fmt::Display for ProjectServiceAccountCreateResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
