/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UserMessageItem : User-authored messages within a thread.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct UserMessageItem {
    /// Identifier of the thread item.
    #[serde(rename = "id")]
    pub id: String,
    /// Type discriminator that is always `chatkit.thread_item`.
    #[serde(rename = "object")]
    pub object: Object,
    /// Unix timestamp (in seconds) for when the item was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// Identifier of the parent thread.
    #[serde(rename = "thread_id")]
    pub thread_id: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Ordered content elements supplied by the user.
    #[serde(rename = "content")]
    pub content: Vec<models::UserMessageItemContentInner>,
    /// Attachments associated with the user message. Defaults to an empty list.
    #[serde(rename = "attachments")]
    pub attachments: Vec<models::Attachment>,
    #[serde(rename = "inference_options", deserialize_with = "Option::deserialize")]
    pub inference_options: Option<Box<models::InferenceOptions>>,
}

impl UserMessageItem {
    /// User-authored messages within a thread.
    pub fn new(id: String, object: Object, created_at: i32, thread_id: String, r#type: Type, content: Vec<models::UserMessageItemContentInner>, attachments: Vec<models::Attachment>, inference_options:Option<models::InferenceOptions>) -> UserMessageItem {
        UserMessageItem {
            id,
            object,
            created_at,
            thread_id,
            r#type,
            content,
            attachments,
            inference_options: inference_options.map(Box::new),
        }
    }
}
/// Type discriminator that is always `chatkit.thread_item`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "chatkit.thread_item")]
    ChatkitThreadItem,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChatkitThreadItem
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "chatkit.user_message")]
    ChatkitUserMessage,
}

impl Default for Type {
    fn default() -> Type {
        Self::ChatkitUserMessage
    }
}



impl std::fmt::Display for UserMessageItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
