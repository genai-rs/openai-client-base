/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateChatCompletionStreamResponseChoicesInnerLogprobs : Log probability information for the choice.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CreateChatCompletionStreamResponseChoicesInnerLogprobs {
    /// A list of message content tokens with log probability information.
    #[serde(rename = "content")]
    pub content: Vec<models::ChatCompletionTokenLogprob>,
    /// A list of message refusal tokens with log probability information.
    #[serde(rename = "refusal")]
    pub refusal: Vec<models::ChatCompletionTokenLogprob>,
}

impl CreateChatCompletionStreamResponseChoicesInnerLogprobs {
    /// Log probability information for the choice.
    pub fn new(
        content: Vec<models::ChatCompletionTokenLogprob>,
        refusal: Vec<models::ChatCompletionTokenLogprob>,
    ) -> CreateChatCompletionStreamResponseChoicesInnerLogprobs {
        CreateChatCompletionStreamResponseChoicesInnerLogprobs { content, refusal }
    }
}

impl std::fmt::Display for CreateChatCompletionStreamResponseChoicesInnerLogprobs {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
