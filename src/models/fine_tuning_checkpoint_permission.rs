/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FineTuningCheckpointPermission : The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct FineTuningCheckpointPermission {
    /// The permission identifier, which can be referenced in the API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The Unix timestamp (in seconds) for when the permission was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The project identifier that the permission is for.
    #[serde(rename = "project_id")]
    pub project_id: String,
    /// The object type, which is always \"checkpoint.permission\".
    #[serde(rename = "object")]
    pub object: Object,
}

impl FineTuningCheckpointPermission {
    /// The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint. 
    pub fn new(id: String, created_at: i32, project_id: String, object: Object) -> FineTuningCheckpointPermission {
        FineTuningCheckpointPermission {
            id,
            created_at,
            project_id,
            object,
        }
    }
}
/// The object type, which is always \"checkpoint.permission\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "checkpoint.permission")]
    CheckpointPermission,
}

impl Default for Object {
    fn default() -> Object {
        Self::CheckpointPermission
    }
}



impl std::fmt::Display for FineTuningCheckpointPermission {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
