/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeBetaServerEventResponseFunctionCallArgumentsDone : Returned when the model-generated function call arguments are done streaming. Also emitted when a Response is interrupted, incomplete, or cancelled. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct RealtimeBetaServerEventResponseFunctionCallArgumentsDone {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<serde_json::Value>,
    /// The ID of the response.
    #[serde(rename = "response_id")]
    pub response_id: String,
    /// The ID of the function call item.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the output item in the response.
    #[serde(rename = "output_index")]
    pub output_index: i32,
    /// The ID of the function call.
    #[serde(rename = "call_id")]
    pub call_id: String,
    /// The final arguments as a JSON string.
    #[serde(rename = "arguments")]
    pub arguments: String,
}

impl RealtimeBetaServerEventResponseFunctionCallArgumentsDone {
    /// Returned when the model-generated function call arguments are done streaming. Also emitted when a Response is interrupted, incomplete, or cancelled. 
    pub fn new(event_id: String, r#type: Option<serde_json::Value>, response_id: String, item_id: String, output_index: i32, call_id: String, arguments: String) -> RealtimeBetaServerEventResponseFunctionCallArgumentsDone {
        RealtimeBetaServerEventResponseFunctionCallArgumentsDone {
            event_id,
            r#type,
            response_id,
            item_id,
            output_index,
            call_id,
            arguments,
        }
    }
}



impl std::fmt::Display for RealtimeBetaServerEventResponseFunctionCallArgumentsDone {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
