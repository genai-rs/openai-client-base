/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResponsePropertiesText : Configuration options for a text response from the model. Can be plain text or structured JSON data. Learn more: - [Text inputs and outputs](https://platform.openai.com/docs/guides/text) - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs) 
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct ResponsePropertiesText {
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Box<models::TextResponseFormatConfiguration>>,
    #[serde(rename = "verbosity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub verbosity: Option<Option<models::Verbosity>>,
}

impl ResponsePropertiesText {
    /// Configuration options for a text response from the model. Can be plain text or structured JSON data. Learn more: - [Text inputs and outputs](https://platform.openai.com/docs/guides/text) - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs) 
    pub fn new() -> ResponsePropertiesText {
        ResponsePropertiesText {
            format: None,
            verbosity: None,
        }
    }
}



impl std::fmt::Display for ResponsePropertiesText {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match serde_json::to_string(self) {
            Ok(s) => write!(f, "{}", s),
            Err(_) => Err(std::fmt::Error),
        }
    }
}
