/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SpeechAudioDeltaEvent : Emitted for each chunk of audio data generated during speech synthesis.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct SpeechAudioDeltaEvent {
    /// The type of the event. Always `speech.audio.delta`. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// A chunk of Base64-encoded audio data. 
    #[serde(rename = "audio")]
    pub audio: String,
}

impl SpeechAudioDeltaEvent {
    /// Emitted for each chunk of audio data generated during speech synthesis.
    pub fn new(r#type: Type, audio: String) -> SpeechAudioDeltaEvent {
        SpeechAudioDeltaEvent {
            r#type,
            audio,
        }
    }
}
/// The type of the event. Always `speech.audio.delta`. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "speech.audio.delta")]
    SpeechAudioDelta,
}

impl Default for Type {
    fn default() -> Type {
        Self::SpeechAudioDelta
    }
}

