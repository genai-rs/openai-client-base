name: Release-plz

# These permissions are needed for release-plz to work
permissions:
  contents: write
  pull-requests: write
  actions: write

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: release-plz
  cancel-in-progress: true

jobs:
  release-plz:
    name: Release-plz
    runs-on: ubuntu-latest
    # Explicitly set permissions at job level too
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Prefer PAT for tagging (if provided)
        if: env.GH_RELEASE_TOKEN != ''
        run: echo "GITHUB_TOKEN=${{ secrets.GH_RELEASE_TOKEN }}" >> $GITHUB_ENV
        env:
          GH_RELEASE_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}

      - name: Cleanup Python caches
        run: |
          rm -rf scripts/__pycache__ || true
          find . -type d -name "__pycache__" -prune -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
        
      - name: Run release-plz
        uses: MarcoIeni/release-plz-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Update GitHub Release notes from CHANGELOG.md
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Determine the current version from Cargo.toml
          VERSION=$(grep -E '^version\s*=\s*"' Cargo.toml | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
          TAG="v${VERSION}"
          echo "Detected version ${VERSION} (tag ${TAG})"
          # If release doesn't exist, skip gracefully
          if ! gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            echo "No GitHub Release found for ${TAG}; skipping notes update."
            exit 0
          fi
          # Extract the section for this version from CHANGELOG.md and update the notes
          if [ ! -f CHANGELOG.md ]; then
            echo "CHANGELOG.md not present; skipping notes update."
            exit 0
          fi
          TMP=$(mktemp)
          printf "%s\n" "## What's Changed" > "$TMP"
          sed -n "/^## \[${VERSION//./\\.}\]/,/^## \[/p" CHANGELOG.md >> "$TMP" || true
          gh release edit "$TAG" --repo "$GITHUB_REPOSITORY" --notes-file "$TMP"
          rm -f "$TMP"
